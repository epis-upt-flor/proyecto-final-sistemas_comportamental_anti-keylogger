"""
üìä Network Analyzer - An√°lisis de Tr√°fico de Red
================================================

Componente especializado en el an√°lisis detallado de conexiones de red.

Implementa:
- Strategy Pattern: Diferentes estrategias de an√°lisis seg√∫n protocolo
- Template Method: Proceso est√°ndar de an√°lisis de conexiones
- Observer Pattern: Monitoreo continuo de tr√°fico de red
"""

import os
import sys
import json
import time
import psutil
import logging
import threading
from typing import Dict, List, Any, Optional, Set, Tuple
from datetime import datetime, timedelta
from collections import defaultdict, deque
from dataclasses import dataclass
from pathlib import Path


@dataclass
class NetworkStats:
    """Estad√≠sticas de red por conexi√≥n."""
    bytes_sent: int
    bytes_received: int
    packets_sent: int  
    packets_received: int
    first_seen: datetime
    last_seen: datetime
    connection_count: int
    
    @property
    def upload_ratio(self) -> float:
        """Calcula ratio de upload vs download."""
        total = self.bytes_sent + self.bytes_received
        return self.bytes_sent / max(total, 1)
    
    @property
    def duration_seconds(self) -> float:
        """Duraci√≥n de la conexi√≥n en segundos."""
        return (self.last_seen - self.first_seen).total_seconds()


class NetworkAnalyzer:
    """
    üìä Analizador de tr√°fico de red para detecci√≥n de patrones maliciosos.
    
    Implementa Template Method para an√°lisis est√°ndar:
    1. Captura de conexiones activas
    2. An√°lisis de estad√≠sticas de tr√°fico
    3. Detecci√≥n de patrones an√≥malos
    4. Correlaci√≥n temporal de conexiones
    """
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.logger = logging.getLogger("network_analyzer")
        
        # Configuraci√≥n de an√°lisis
        self.analysis_config = config.get('network_config', {})
        self.analysis_window = self.analysis_config.get('analysis_window_minutes', 10)
        self.max_connections = self.analysis_config.get('max_connections_per_minute', 50)
        
        # Estado interno
        self.connection_stats: Dict[str, NetworkStats] = {}
        self.process_connections: Dict[int, List[str]] = defaultdict(list)
        self.timeline: deque = deque(maxlen=10000)
        self.analysis_lock = threading.Lock()
        
        # M√©tricas
        self.metrics = {
            'total_connections': 0,
            'active_connections': 0,
            'suspicious_patterns': 0,
            'analysis_cycles': 0
        }
    
    async def initialize(self) -> bool:
        """Inicializa el analizador de red."""
        try:
            self.logger.info("üìä Inicializando Network Analyzer...")
            
            # Verificar capacidades del sistema
            if not self._check_system_capabilities():
                return False
            
            # Configurar baseline de red
            await self._establish_network_baseline()
            
            self.logger.info("‚úÖ Network Analyzer inicializado")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Error inicializando Network Analyzer: {e}")
            return False
    
    def _check_system_capabilities(self) -> bool:
        """Verifica capacidades del sistema para an√°lisis de red."""
        try:
            # Verificar acceso a conexiones de red
            connections = psutil.net_connections(kind='inet')
            self.logger.info(f"üîç Sistema soporta an√°lisis de red: {len(connections)} conexiones detectadas")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå Sistema no soporta an√°lisis de red: {e}")
            return False
    
    async def _establish_network_baseline(self):
        """Establece baseline de comportamiento normal de red."""
        try:
            self.logger.info("üìè Estableciendo baseline de red...")
            
            # Capturar estado inicial
            initial_connections = self.get_active_connections()
            
            # Estad√≠sticas baseline
            self.baseline = {
                'normal_connection_count': len(initial_connections),
                'established_time': datetime.now(),
                'common_ports': self._analyze_common_ports(initial_connections),
                'process_patterns': self._analyze_process_patterns(initial_connections)
            }
            
            self.logger.info(f"üìè Baseline establecido: {len(initial_connections)} conexiones normales")
            
        except Exception as e:
            self.logger.error(f"‚ùå Error estableciendo baseline: {e}")
    
    # ==================== TEMPLATE METHOD ====================
    
    def get_active_connections(self) -> List[Dict[str, Any]]:
        """
        üéØ Template Method: Obtiene y procesa conexiones activas.
        
        Steps:
        1. Capturar conexiones del sistema
        2. Filtrar conexiones relevantes  
        3. Enriquecer con datos de proceso
        4. Aplicar an√°lisis de patrones
        """
        try:
            # Step 1: Capturar conexiones
            raw_connections = self._capture_system_connections()
            
            # Step 2: Filtrar relevantes
            filtered_connections = self._filter_relevant_connections(raw_connections)
            
            # Step 3: Enriquecer con procesos
            enriched_connections = self._enrich_with_process_data(filtered_connections)
            
            # Step 4: An√°lisis de patrones
            analyzed_connections = self._analyze_connection_patterns(enriched_connections)
            
            self.metrics['analysis_cycles'] += 1
            return analyzed_connections
            
        except Exception as e:
            self.logger.error(f"‚ùå Error obteniendo conexiones activas: {e}")
            return []
    
    def _capture_system_connections(self) -> List[Dict[str, Any]]:
        """Step 1: Captura conexiones del sistema."""
        connections = []
        
        try:
            # Obtener conexiones de red
            net_connections = psutil.net_connections(kind='inet')
            
            for conn in net_connections:
                if conn.status == psutil.CONN_ESTABLISHED and conn.raddr:
                    connection_data = {
                        'local_ip': conn.laddr.ip if conn.laddr else '',
                        'local_port': conn.laddr.port if conn.laddr else 0,
                        'remote_ip': conn.raddr.ip if conn.raddr else '',
                        'remote_port': conn.raddr.port if conn.raddr else 0,
                        'protocol': 'TCP' if conn.type == 1 else 'UDP',
                        'status': conn.status,
                        'pid': conn.pid,
                        'timestamp': datetime.now()
                    }
                    connections.append(connection_data)
            
            self.metrics['total_connections'] = len(connections)
            return connections
            
        except Exception as e:
            self.logger.error(f"‚ùå Error capturando conexiones: {e}")
            return []
    
    def _filter_relevant_connections(self, connections: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """Step 2: Filtra conexiones relevantes para an√°lisis."""
        filtered = []
        
        for conn in connections:
            # Filtrar conexiones locales
            remote_ip = conn.get('remote_ip', '')
            if self._is_local_ip(remote_ip):
                continue
                
            # Filtrar puertos del sistema
            remote_port = conn.get('remote_port', 0)
            if self._is_system_port(remote_port):
                continue
            
            # Filtrar procesos del sistema
            if conn.get('pid') and self._is_system_process(conn.get('pid')):
                continue
            
            filtered.append(conn)
        
        self.metrics['active_connections'] = len(filtered)
        return filtered
    
    def _enrich_with_process_data(self, connections: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """Step 3: Enriquece conexiones con datos de proceso."""
        enriched = []
        
        for conn in connections:
            try:
                pid = conn.get('pid')
                if pid:
                    process = psutil.Process(pid)
                    
                    # Agregar informaci√≥n del proceso
                    conn.update({
                        'process_name': process.name(),
                        'process_exe': process.exe() if hasattr(process, 'exe') else '',
                        'process_cmdline': ' '.join(process.cmdline()) if hasattr(process, 'cmdline') else '',
                        'process_create_time': datetime.fromtimestamp(process.create_time()),
                        'process_cpu_percent': process.cpu_percent(),
                        'process_memory_mb': process.memory_info().rss / 1024 / 1024
                    })
                    
                    # Agregar estad√≠sticas de red del proceso
                    try:
                        net_io = process.net_io_counters()
                        if net_io:
                            conn.update({
                                'bytes_sent': net_io.bytes_sent,
                                'bytes_recv': net_io.bytes_recv,
                                'packets_sent': net_io.packets_sent,
                                'packets_recv': net_io.packets_recv
                            })
                    except:
                        pass
                
                enriched.append(conn)
                
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                # Proceso terminado o sin acceso
                continue
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è Error enriqueciendo conexi√≥n: {e}")
                enriched.append(conn)
        
        return enriched
    
    def _analyze_connection_patterns(self, connections: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """Step 4: Analiza patrones en las conexiones."""
        analyzed = []
        
        with self.analysis_lock:
            for conn in connections:
                # Generar ID √∫nico de conexi√≥n
                conn_id = f"{conn.get('remote_ip')}:{conn.get('remote_port')}"
                
                # Actualizar estad√≠sticas
                self._update_connection_stats(conn_id, conn)
                
                # Agregar an√°lisis de patrones
                conn['pattern_analysis'] = self._analyze_single_connection(conn)
                
                # Agregar a timeline
                self.timeline.append({
                    'timestamp': conn.get('timestamp'),
                    'connection_id': conn_id,
                    'remote_ip': conn.get('remote_ip'),
                    'process_name': conn.get('process_name', ''),
                    'bytes_sent': conn.get('bytes_sent', 0)
                })
                
                analyzed.append(conn)
        
        return analyzed
    
    # ==================== STRATEGY PATTERN ====================
    
    def _analyze_single_connection(self, connection: Dict[str, Any]) -> Dict[str, Any]:
        """
        üéØ Strategy Pattern: Aplica diferentes estrategias de an√°lisis seg√∫n caracter√≠sticas.
        """
        analysis = {}
        
        # Estrategia por protocolo
        protocol = connection.get('protocol', 'TCP')
        if protocol == 'TCP':
            analysis.update(self._analyze_tcp_connection(connection))
        elif protocol == 'UDP':
            analysis.update(self._analyze_udp_connection(connection))
        
        # Estrategia por puerto
        port = connection.get('remote_port', 0)
        analysis.update(self._analyze_by_port(connection, port))
        
        # Estrategia por proceso
        process_name = connection.get('process_name', '')
        analysis.update(self._analyze_by_process(connection, process_name))
        
        # Estrategia por tr√°fico
        bytes_sent = connection.get('bytes_sent', 0)
        bytes_recv = connection.get('bytes_recv', 0)
        analysis.update(self._analyze_traffic_pattern(bytes_sent, bytes_recv))
        
        return analysis
    
    def _analyze_tcp_connection(self, connection: Dict[str, Any]) -> Dict[str, Any]:
        """Estrategia de an√°lisis para conexiones TCP."""
        analysis = {'protocol_analysis': 'tcp'}
        
        remote_port = connection.get('remote_port', 0)
        
        # An√°lisis por categor√≠a de puerto
        if remote_port in [80, 443, 8080, 8443]:
            analysis['connection_type'] = 'web'
            analysis['suspicious_score'] = 0.1
        elif remote_port in [22, 23, 21, 25, 110, 143, 993, 995]:
            analysis['connection_type'] = 'service'
            analysis['suspicious_score'] = 0.3
        elif remote_port > 49152:  # Puertos din√°micos
            analysis['connection_type'] = 'dynamic'
            analysis['suspicious_score'] = 0.6
        else:
            analysis['connection_type'] = 'other'
            analysis['suspicious_score'] = 0.4
        
        return analysis
    
    def _analyze_udp_connection(self, connection: Dict[str, Any]) -> Dict[str, Any]:
        """Estrategia de an√°lisis para conexiones UDP.""" 
        analysis = {'protocol_analysis': 'udp'}
        
        remote_port = connection.get('remote_port', 0)
        
        # DNS queries
        if remote_port == 53:
            analysis['connection_type'] = 'dns'
            analysis['suspicious_score'] = 0.1
        # NTP
        elif remote_port == 123:
            analysis['connection_type'] = 'ntp'
            analysis['suspicious_score'] = 0.1
        else:
            analysis['connection_type'] = 'other_udp'
            analysis['suspicious_score'] = 0.5
        
        return analysis
    
    def _analyze_by_port(self, connection: Dict[str, Any], port: int) -> Dict[str, Any]:
        """Estrategia de an√°lisis por puerto."""
        analysis = {}
        
        # Puertos sospechosos conocidos
        suspicious_ports = {
            1337: 'backdoor_common',
            31337: 'backdoor_elite', 
            12345: 'netbus',
            54321: 'back_orifice',
            6667: 'irc_default',
            6666: 'irc_alt'
        }
        
        if port in suspicious_ports:
            analysis['port_reputation'] = 'malicious'
            analysis['port_description'] = suspicious_ports[port]
            analysis['suspicious_score'] = 0.9
        elif port < 1024:
            analysis['port_reputation'] = 'system'
            analysis['suspicious_score'] = 0.2
        elif port > 49152:
            analysis['port_reputation'] = 'dynamic'
            analysis['suspicious_score'] = 0.4
        else:
            analysis['port_reputation'] = 'registered'
            analysis['suspicious_score'] = 0.3
        
        return analysis
    
    def _analyze_by_process(self, connection: Dict[str, Any], process_name: str) -> Dict[str, Any]:
        """Estrategia de an√°lisis por proceso."""
        analysis = {}
        
        # Procesos leg√≠timos conocidos
        legitimate_processes = {
            'chrome.exe', 'firefox.exe', 'edge.exe', 'outlook.exe',
            'teams.exe', 'skype.exe', 'zoom.exe', 'discord.exe'
        }
        
        # Procesos del sistema
        system_processes = {
            'svchost.exe', 'explorer.exe', 'winlogon.exe', 'csrss.exe'
        }
        
        if process_name.lower() in legitimate_processes:
            analysis['process_reputation'] = 'legitimate'
            analysis['suspicious_score'] = 0.1
        elif process_name.lower() in system_processes:
            analysis['process_reputation'] = 'system'
            analysis['suspicious_score'] = 0.2
        elif not process_name or process_name == '':
            analysis['process_reputation'] = 'unknown'
            analysis['suspicious_score'] = 0.7
        else:
            analysis['process_reputation'] = 'third_party'
            analysis['suspicious_score'] = 0.4
        
        return analysis
    
    def _analyze_traffic_pattern(self, bytes_sent: int, bytes_recv: int) -> Dict[str, Any]:
        """Estrategia de an√°lisis por patr√≥n de tr√°fico."""
        analysis = {}
        
        total_bytes = bytes_sent + bytes_recv
        if total_bytes == 0:
            return {'traffic_pattern': 'no_data'}
        
        upload_ratio = bytes_sent / total_bytes
        
        # An√°lisis de ratio de upload
        if upload_ratio > 0.8:
            analysis['traffic_pattern'] = 'high_upload'
            analysis['exfiltration_risk'] = 'high'
            analysis['suspicious_score'] = 0.8
        elif upload_ratio > 0.6:
            analysis['traffic_pattern'] = 'moderate_upload'
            analysis['exfiltration_risk'] = 'medium'
            analysis['suspicious_score'] = 0.5
        elif upload_ratio < 0.2:
            analysis['traffic_pattern'] = 'download_heavy'
            analysis['exfiltration_risk'] = 'low'
            analysis['suspicious_score'] = 0.2
        else:
            analysis['traffic_pattern'] = 'balanced'
            analysis['exfiltration_risk'] = 'low'
            analysis['suspicious_score'] = 0.3
        
        # An√°lisis de volumen
        if total_bytes > 100_000_000:  # 100MB
            analysis['volume_analysis'] = 'high_volume'
        elif total_bytes > 10_000_000:  # 10MB
            analysis['volume_analysis'] = 'moderate_volume'
        else:
            analysis['volume_analysis'] = 'low_volume'
        
        return analysis
    
    # ==================== AN√ÅLISIS DE PATRONES TEMPORALES ====================
    
    def _update_connection_stats(self, conn_id: str, connection: Dict[str, Any]):
        """Actualiza estad√≠sticas de conexi√≥n."""
        now = datetime.now()
        
        if conn_id not in self.connection_stats:
            self.connection_stats[conn_id] = NetworkStats(
                bytes_sent=connection.get('bytes_sent', 0),
                bytes_received=connection.get('bytes_recv', 0),
                packets_sent=connection.get('packets_sent', 0),
                packets_received=connection.get('packets_recv', 0),
                first_seen=now,
                last_seen=now,
                connection_count=1
            )
        else:
            stats = self.connection_stats[conn_id]
            stats.bytes_sent = max(stats.bytes_sent, connection.get('bytes_sent', 0))
            stats.bytes_received = max(stats.bytes_received, connection.get('bytes_recv', 0))
            stats.packets_sent = max(stats.packets_sent, connection.get('packets_sent', 0))
            stats.packets_received = max(stats.packets_received, connection.get('packets_recv', 0))
            stats.last_seen = now
            stats.connection_count += 1
    
    def analyze_temporal_patterns(self, time_window_minutes: int = 10) -> Dict[str, Any]:
        """Analiza patrones temporales de conexiones."""
        try:
            cutoff_time = datetime.now() - timedelta(minutes=time_window_minutes)
            recent_connections = [
                entry for entry in self.timeline 
                if entry['timestamp'] > cutoff_time
            ]
            
            if not recent_connections:
                return {'pattern_type': 'no_data'}
            
            # An√°lisis de frecuencia por IP
            ip_frequency = defaultdict(int)
            process_frequency = defaultdict(int)
            
            for entry in recent_connections:
                ip_frequency[entry['remote_ip']] += 1
                process_frequency[entry['process_name']] += 1
            
            # Detectar patrones sospechosos
            analysis = {
                'total_connections': len(recent_connections),
                'unique_ips': len(ip_frequency),
                'unique_processes': len(process_frequency),
                'time_window_minutes': time_window_minutes
            }
            
            # Detecci√≥n de beacons (conexiones regulares)
            beacon_patterns = self._detect_beacon_patterns(recent_connections)
            if beacon_patterns:
                analysis['beacon_detected'] = True
                analysis['beacon_patterns'] = beacon_patterns
                self.metrics['suspicious_patterns'] += 1
            
            # Detecci√≥n de r√°fagas de conexiones
            burst_patterns = self._detect_connection_bursts(recent_connections)
            if burst_patterns:
                analysis['burst_detected'] = True
                analysis['burst_patterns'] = burst_patterns
                self.metrics['suspicious_patterns'] += 1
            
            return analysis
            
        except Exception as e:
            self.logger.error(f"‚ùå Error analizando patrones temporales: {e}")
            return {'error': str(e)}
    
    def _detect_beacon_patterns(self, connections: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """Detecta patrones de beacon (comunicaciones regulares)."""
        beacon_patterns = []
        
        # Agrupar por IP y proceso
        grouped = defaultdict(list)
        for conn in connections:
            key = (conn['remote_ip'], conn['process_name'])
            grouped[key].append(conn['timestamp'])
        
        # Analizar regularidad temporal
        for (ip, process), timestamps in grouped.items():
            if len(timestamps) >= 3:  # M√≠nimo 3 conexiones
                # Calcular intervalos
                timestamps.sort()
                intervals = []
                for i in range(1, len(timestamps)):
                    interval = (timestamps[i] - timestamps[i-1]).total_seconds()
                    intervals.append(interval)
                
                # Calcular regularidad (desviaci√≥n est√°ndar)
                if len(intervals) >= 2:
                    mean_interval = sum(intervals) / len(intervals)
                    variance = sum((x - mean_interval) ** 2 for x in intervals) / len(intervals)
                    std_dev = variance ** 0.5
                    
                    # Coeficiente de variaci√≥n (regularidad)
                    cv = std_dev / max(mean_interval, 1)
                    
                    # Patr√≥n de beacon si es muy regular (CV < 0.3)
                    if cv < 0.3 and len(timestamps) >= 5:
                        beacon_patterns.append({
                            'remote_ip': ip,
                            'process_name': process,
                            'connection_count': len(timestamps),
                            'mean_interval_seconds': mean_interval,
                            'regularity_score': 1.0 - cv,
                            'confidence': min(0.9, len(timestamps) / 10)
                        })
        
        return beacon_patterns
    
    def _detect_connection_bursts(self, connections: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """Detecta r√°fagas de conexiones (muchas conexiones en poco tiempo)."""
        burst_patterns = []
        
        # Agrupar conexiones por minuto
        minute_groups = defaultdict(list)
        for conn in connections:
            minute_key = conn['timestamp'].replace(second=0, microsecond=0)
            minute_groups[minute_key].append(conn)
        
        # Detectar minutos con muchas conexiones
        for minute, minute_connections in minute_groups.items():
            if len(minute_connections) > self.max_connections:
                # Analizar IPs √∫nicas
                unique_ips = set(conn['remote_ip'] for conn in minute_connections)
                unique_processes = set(conn['process_name'] for conn in minute_connections)
                
                burst_patterns.append({
                    'timestamp': minute.isoformat(),
                    'connection_count': len(minute_connections),
                    'unique_ips': len(unique_ips),
                    'unique_processes': len(unique_processes),
                    'ips': list(unique_ips)[:10],  # Top 10 IPs
                    'processes': list(unique_processes)[:10],  # Top 10 processes
                    'severity': 'high' if len(minute_connections) > self.max_connections * 2 else 'medium'
                })
        
        return burst_patterns
    
    # ==================== UTILIDADES ====================
    
    def _is_local_ip(self, ip: str) -> bool:
        """Determina si una IP es local."""
        local_prefixes = ['127.', '192.168.', '10.', '172.16.', '172.17.', '172.18.', 
                         '172.19.', '172.20.', '172.21.', '172.22.', '172.23.', 
                         '172.24.', '172.25.', '172.26.', '172.27.', '172.28.', 
                         '172.29.', '172.30.', '172.31.', '169.254.']
        
        return any(ip.startswith(prefix) for prefix in local_prefixes)
    
    def _is_system_port(self, port: int) -> bool:
        """Determina si un puerto es del sistema."""
        # Puertos comunes del sistema que normalmente no son sospechosos
        system_ports = {53, 80, 443, 123, 443, 993, 995, 587, 465}
        return port in system_ports
    
    def _is_system_process(self, pid: int) -> bool:
        """Determina si un proceso es del sistema."""
        try:
            process = psutil.Process(pid)
            process_name = process.name().lower()
            
            system_processes = {
                'system', 'svchost.exe', 'explorer.exe', 'winlogon.exe',
                'csrss.exe', 'smss.exe', 'wininit.exe', 'services.exe'
            }
            
            return process_name in system_processes
        except:
            return False
    
    def _analyze_common_ports(self, connections: List[Dict[str, Any]]) -> Dict[int, int]:
        """Analiza puertos m√°s comunes en conexiones."""
        port_counts = defaultdict(int)
        for conn in connections:
            port = conn.get('remote_port', 0)
            if port > 0:
                port_counts[port] += 1
        
        # Retornar top 10 puertos
        return dict(sorted(port_counts.items(), key=lambda x: x[1], reverse=True)[:10])
    
    def _analyze_process_patterns(self, connections: List[Dict[str, Any]]) -> Dict[str, int]:
        """Analiza patrones de procesos en conexiones."""
        process_counts = defaultdict(int)
        for conn in connections:
            process = conn.get('process_name', 'unknown')
            process_counts[process] += 1
        
        # Retornar top 10 procesos
        return dict(sorted(process_counts.items(), key=lambda x: x[1], reverse=True)[:10])
    
    def get_connection_summary(self) -> Dict[str, Any]:
        """Obtiene resumen de conexiones analizadas."""
        return {
            'total_unique_connections': len(self.connection_stats),
            'timeline_entries': len(self.timeline),
            'metrics': self.metrics,
            'baseline': getattr(self, 'baseline', {}),
            'last_analysis': datetime.now().isoformat()
        }
    
    def cleanup_old_data(self, hours: int = 24):
        """Limpia datos antiguos para optimizar memoria."""
        cutoff_time = datetime.now() - timedelta(hours=hours)
        
        # Limpiar estad√≠sticas de conexi√≥n antiguas
        old_connections = []
        for conn_id, stats in self.connection_stats.items():
            if stats.last_seen < cutoff_time:
                old_connections.append(conn_id)
        
        for conn_id in old_connections:
            del self.connection_stats[conn_id]
        
        self.logger.info(f"üßπ Limpiadas {len(old_connections)} conexiones antiguas")


# ==================== TESTING ====================

def main():
    """Funci√≥n de testing del NetworkAnalyzer."""
    import asyncio
    
    async def test_analyzer():
        """Test del analizador de red."""
        print("üß™ Testing Network Analyzer...")
        
        # Configuraci√≥n de prueba
        config = {
            'network_config': {
                'analysis_window_minutes': 5,
                'max_connections_per_minute': 20
            }
        }
        
        # Crear analyzer
        analyzer = NetworkAnalyzer(config)
        
        # Test inicializaci√≥n
        success = await analyzer.initialize()
        print(f"‚úÖ Inicializaci√≥n: {'OK' if success else 'FALLO'}")
        
        if success:
            # Test captura de conexiones
            connections = analyzer.get_active_connections()
            print(f"üîç Conexiones detectadas: {len(connections)}")
            
            # Test an√°lisis temporal
            temporal_analysis = analyzer.analyze_temporal_patterns(5)
            print(f"üìä An√°lisis temporal: {temporal_analysis.get('total_connections', 0)} conexiones")
            
            # Test resumen
            summary = analyzer.get_connection_summary()
            print(f"üìã Resumen: {summary['total_unique_connections']} conexiones √∫nicas")
        
        print("üèÅ Test completado")
    
    # Ejecutar test
    asyncio.run(test_analyzer())


if __name__ == "__main__":
    main()