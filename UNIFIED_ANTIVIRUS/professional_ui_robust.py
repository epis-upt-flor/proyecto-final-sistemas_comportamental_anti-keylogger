#!/usr/bin/env python3
"""
Robust Professional Anti-Keylogger UI
====================================

Versi√≥n mejorada que maneja eficientemente grandes vol√∫menes de datos
sin colgarse ni saturar la interfaz.
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import threading
import queue
import time
import json
import math
import os
import psutil
from datetime import datetime
from collections import defaultdict, deque, Counter
import os
import subprocess
from datetime import datetime
from pathlib import Path
import sys
from collections import defaultdict, deque

# Agregar path
sys.path.insert(0, str(Path(__file__).parent))
from core import UnifiedAntivirusEngine


class RobustAntivirusUI:
    """UI robusta para el antivirus que maneja grandes vol√∫menes de datos"""
    
    def __init__(self):
        self.root = None
        self.notebook = None
        
        # Engine y control
        self.engine = None
        self.engine_thread = None
        self.engine_running = threading.Event()
        self.data_queue = queue.Queue()
        
        # Variables de estado
        self.is_protection_active = False
        self.start_time = time.time()  # ARREGLAR: Inicializar inmediatamente para que el tiempo sea fidedigno
        self.detected_threats_count = 0  # Contador independiente para m√©tricas
        
        # Variables UI
        self.status_vars = {}
        self.threat_listbox = None
        self.log_text = None
        
        # Configuraci√≥n
        self.config_file = "config/ui_settings.json"
        self.load_ui_settings()
        
        # Sistema de filtrado y agregaci√≥n para evitar spam
        self.threat_aggregator = ThreatAggregator()
        self.log_buffer = deque(maxlen=500)  # Reducir buffer para mejor rendimiento
        self.ui_update_lock = threading.Lock()
        
        # Control de rendimiento mejorado
        self.update_interval = 5.0  # Optimizado: intervalos m√°s largos para mejor rendimiento
        self.pending_updates = 0
        self.max_pending_updates = 3  # Limitar actualizaciones pendientes
        self.last_update_time = 0
        
        # Contadores para m√©tricas
        self.metrics = {
            'total_threats': 0,
            'unique_threats': 0,
            'scans_completed': 0,
            'active_plugins': 0,
            'filtered_events': 0
        }
        
    def load_ui_settings(self):
        """Carga configuraci√≥n de la UI"""
        default_config = {
            "window_size": "1200x800",
            "theme": "dark",
            "auto_start": False,
            "max_threats_display": 100,
            "aggregate_duplicates": True,
            "update_interval": 500,  # ms
            "threat_filter_keywords": ["opera", "discord", "steam", "capture"],
            "presets": {
                "basic": {"sensitivity": "low", "features": ["behavior"]},
                "standard": {"sensitivity": "medium", "features": ["behavior", "ml"]},
                "advanced": {"sensitivity": "high", "features": ["behavior", "ml", "network"]}
            }
        }
        
        try:
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r') as f:
                    self.ui_config = json.load(f)
                # Merge with defaults
                for key, value in default_config.items():
                    if key not in self.ui_config:
                        self.ui_config[key] = value
            else:
                self.ui_config = default_config
                self.save_ui_settings()
        except Exception as e:
            print(f"Error cargando configuraci√≥n: {e}")
            self.ui_config = default_config
    
    def save_ui_settings(self):
        """Guarda configuraci√≥n de la UI"""
        try:
            os.makedirs(os.path.dirname(self.config_file), exist_ok=True)
            with open(self.config_file, 'w') as f:
                json.dump(self.ui_config, f, indent=2)
        except Exception as e:
            print(f"Error guardando configuraci√≥n: {e}")
    
    def create_main_window(self):
        """Crea la ventana principal"""
        self.root = tk.Tk()
        self.root.title("üõ°Ô∏è Robust Anti-Keylogger Control Panel")
        self.root.geometry(self.ui_config.get("window_size", "1200x800"))
        
        # Configurar tema
        self.setup_theme()
        
        # Crear menu
        self.create_menu()
        
        # Crear notebook con pesta√±as
        self.create_notebook()
        
        # Protocolo de cierre
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
        
    def setup_theme(self):
        """Configura el tema de la aplicaci√≥n de forma din√°mica"""
        
        theme = self.ui_config.get("theme", "dark")
        
        if theme == "dark":
            # Tema oscuro con mucho contraste
            self.colors = {
                'bg_primary': '#1a1a1a',      # Muy oscuro
                'bg_secondary': '#2d2d2d',    # Oscuro medio
                'bg_accent': '#404040',
                'text_primary': '#ffffff',    # Blanco puro
                'text_secondary': '#cccccc',
                'accent': '#00d4aa',          # Verde-azul brillante
                'success': '#00ff88',
                'warning': '#ffaa00',
                'error': '#ff4444',
                'info': '#8844ff',
                'button_bg': '#404040',       # Gris medio
                'button_fg': '#ffffff',
                'button_active': '#555555'
            }
        elif theme == "light":
            # Tema claro con mucho contraste
            self.colors = {
                'bg_primary': '#f8f9fa',      # Casi blanco
                'bg_secondary': '#ffffff',    # Blanco puro
                'bg_accent': '#e9ecef',
                'text_primary': '#212529',    # Casi negro
                'text_secondary': '#6c757d',
                'accent': '#0d6efd',          # Azul moderno
                'success': '#198754',
                'warning': '#fd7e14',
                'error': '#dc3545',
                'info': '#6f42c1',
                'button_bg': '#e9ecef',
                'button_fg': '#495057',
                'button_active': '#dee2e6'
            }
        elif theme == "blue":
            # Tema azul marino profundo
            self.colors = {
                'bg_primary': '#0f1419',      # Azul muy oscuro
                'bg_secondary': '#1a2332',    # Azul oscuro secundario
                'bg_accent': '#2a3f5f',
                'text_primary': '#e6f3ff',    # Azul muy claro
                'text_secondary': '#99ccff',
                'accent': '#00bfff',          # Azul cielo brillante
                'success': '#00ff7f',
                'warning': '#ffa500',
                'error': '#ff6347',
                'info': '#87ceeb',
                'button_bg': '#2a3f5f',
                'button_fg': '#ffffff',
                'button_active': '#3a4f6f'
            }
        elif theme == "green":
            # Tema verde bosque profundo
            self.colors = {
                'bg_primary': '#0d1f0d',      # Verde muy oscuro
                'bg_secondary': '#1a331a',    # Verde oscuro secundario
                'bg_accent': '#2d5a2d',
                'text_primary': '#e6ffe6',    # Verde muy claro
                'text_secondary': '#99ff99',
                'accent': '#00ff00',          # Verde brillante
                'success': '#32cd32',
                'warning': '#ffd700',
                'error': '#ff4500',
                'info': '#90ee90',
                'button_bg': '#2d5a2d',
                'button_fg': '#ffffff',
                'button_active': '#3d6a3d'
            }
        
        # Aplicar tema al root si existe
        if hasattr(self, 'root') and self.root:
            self.root.configure(bg=self.colors['bg_primary'])
            
            # Configurar estilo ttk si existe
            try:
                style = ttk.Style()
                style.configure('Custom.TFrame', background=self.colors['bg_secondary'])
                style.configure('Custom.TLabel', background=self.colors['bg_secondary'], 
                              foreground=self.colors['text_primary'])
                style.configure('Custom.TButton', background=self.colors['bg_accent'])
                style.configure('Custom.TNotebook', background=self.colors['bg_primary'])
                style.configure('Custom.TNotebook.Tab', background=self.colors['bg_accent'],
                              foreground=self.colors['text_primary'])
            except:
                pass
    
    def create_menu(self):
        """Crea el men√∫ principal"""
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)
        
        # Men√∫ Archivo
        file_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Archivo", menu=file_menu)
        file_menu.add_command(label="Exportar Log", command=self.export_log)
        file_menu.add_separator()
        file_menu.add_command(label="Salir", command=self.on_closing)
        
        # Men√∫ Antivirus
        av_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Antivirus", menu=av_menu)
        av_menu.add_command(label="Iniciar Protecci√≥n", command=self.start_protection)
        av_menu.add_command(label="Detener Protecci√≥n", command=self.stop_protection)
        
        # Men√∫ Ver
        view_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Ver", menu=view_menu)
        view_menu.add_command(label="Actualizar", command=self.refresh_all)
        view_menu.add_command(label="Limpiar Logs", command=self.clear_logs)
        view_menu.add_command(label="Resetear Filtros", command=self.reset_filters)
    
    def create_notebook(self):
        """Crea el notebook con todas las pesta√±as"""
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # Variable para tracking de pesta√±a activa
        self.current_tab = tk.StringVar(value="Dashboard")
        
        # Bind para detectar cambios de pesta√±a
        self.notebook.bind("<<NotebookTabChanged>>", self.on_tab_changed)
        
        # Pesta√±a 1: Dashboard Principal
        self.create_dashboard_tab()
        
        # Pesta√±a 2: Gesti√≥n de Alertas
        self.create_alerts_tab()
        
        # Pesta√±a 3: Configuraci√≥n
        self.create_config_tab()
        
        # Pesta√±a 4: Estad√≠sticas Avanzadas
        self.create_stats_tab()

    def on_tab_changed(self, event):
        """Callback para cambios de pesta√±a - optimiza actualizaciones"""
        try:
            selected_tab = event.widget.tab('current')['text']
            self.current_tab.set(selected_tab)
            
            # Optimizaci√≥n: solo actualizar datos cuando se cambia a pesta√±as espec√≠ficas
            if selected_tab == "Estad√≠sticas":
                # Cargar datos de estad√≠sticas solo cuando se necesiten
                self.root.after(100, self.update_all_charts)
            elif selected_tab == "Alertas":
                # Refrescar alertas solo cuando se accede a la pesta√±a
                self.root.after(100, self.update_threat_display)
                
        except Exception as e:
            print(f"Error en on_tab_changed: {e}")
    
    def create_dashboard_tab(self):
        """Crea la pesta√±a del dashboard principal"""
        dashboard_frame = ttk.Frame(self.notebook)
        self.notebook.add(dashboard_frame, text="üìä Dashboard")
        
        # Header con controles principales
        header_frame = tk.Frame(dashboard_frame, bg=self.colors['bg_secondary'], height=80)
        header_frame.pack(fill=tk.X, padx=10, pady=5)
        header_frame.pack_propagate(False)
        
        # Control de protecci√≥n
        control_frame = tk.Frame(header_frame, bg=self.colors['bg_secondary'])
        control_frame.pack(side=tk.LEFT, padx=20, pady=20)
        
        self.protection_btn = tk.Button(
            control_frame,
            text="üõ°Ô∏è INICIAR PROTECCI√ìN",
            font=('Arial', 12, 'bold'),
            bg=self.colors['success'],
            fg='white',
            padx=20,
            pady=10,
            command=self.toggle_protection
        )
        self.protection_btn.pack()
        
        # Estado del sistema
        status_frame = tk.Frame(header_frame, bg=self.colors['bg_secondary'])
        status_frame.pack(side=tk.RIGHT, padx=20, pady=10)
        
        tk.Label(
            status_frame,
            text="Estado del Sistema:",
            font=('Arial', 10, 'bold'),
            bg=self.colors['bg_secondary'],
            fg=self.colors['text_primary']
        ).pack()
        
        self.status_vars['system_status'] = tk.StringVar(value="üî¥ Detenido")
        tk.Label(
            status_frame,
            textvariable=self.status_vars['system_status'],
            font=('Arial', 12, 'bold'),
            bg=self.colors['bg_secondary'],
            fg=self.colors['error']
        ).pack()
        
        # Panel de m√©tricas mejorado con m√°s informaci√≥n
        metrics_frame = tk.Frame(dashboard_frame, bg=self.colors['bg_primary'])
        metrics_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # M√©tricas superiores
        top_metrics = tk.Frame(metrics_frame, bg=self.colors['bg_primary'])
        top_metrics.pack(fill=tk.X, pady=5)
        
        self.create_metric_card(top_metrics, "üö® Amenazas", "total_threats", "0", self.colors['error'])
        self.create_metric_card(top_metrics, "üîç √önicas", "unique_threats", "0", self.colors['warning'])
        self.create_metric_card(top_metrics, "‚è±Ô∏è Tiempo", "uptime", "00:00:00", self.colors['text_primary'])
        self.create_metric_card(top_metrics, "üîå Plugins", "active_plugins", "0", self.colors['success'])
        self.create_metric_card(top_metrics, "üõ°Ô∏è Filtrados", "filtered_events", "0", self.colors['info'])
        
        # Panel de gr√°ficos en tiempo real en el Dashboard (usando grid)
        charts_frame = tk.Frame(metrics_frame, bg=self.colors['bg_primary'])
        charts_frame.pack(fill=tk.BOTH, expand=True, pady=5)
        
        # Configurar grid con pesos uniformes
        charts_frame.columnconfigure(0, weight=1)
        charts_frame.columnconfigure(1, weight=1)
        charts_frame.rowconfigure(0, weight=1)
        
        # Gr√°fico en tiempo real - columna 0
        realtime_chart_frame = tk.LabelFrame(
            charts_frame,
            text="üìä Actividad en Tiempo Real",
            font=('Arial', 10, 'bold'),
            bg=self.colors['bg_primary'],
            fg=self.colors['text_primary']
        )
        realtime_chart_frame.grid(row=0, column=0, sticky="nsew", padx=(0, 3))
        
        self.dashboard_chart = tk.Canvas(
            realtime_chart_frame,
            width=300,
            height=150,
            bg=self.colors['bg_secondary']
        )
        self.dashboard_chart.pack(padx=5, pady=5, fill=tk.BOTH, expand=True)
        
        # Top procesos activos - columna 1
        top_processes_frame = tk.LabelFrame(
            charts_frame,
            text="üî• Top Procesos Detectados",
            font=('Arial', 10, 'bold'),
            bg=self.colors['bg_primary'],
            fg=self.colors['text_primary']
        )
        top_processes_frame.grid(row=0, column=1, sticky="nsew", padx=(3, 0))
        
        self.dashboard_processes = tk.Text(
            top_processes_frame,
            height=8,
            bg=self.colors['bg_secondary'],
            fg=self.colors['text_primary'],
            font=('Consolas', 9)
        )
        self.dashboard_processes.pack(padx=5, pady=5, fill=tk.BOTH, expand=True)
        
        # Log inteligente con filtrado (m√°s compacto)
        log_frame = tk.LabelFrame(
            metrics_frame,
            text="üß† Log Inteligente (Amenazas √önicas)",
            font=('Arial', 12, 'bold'),
            bg=self.colors['bg_primary'],
            fg=self.colors['text_primary']
        )
        log_frame.pack(fill=tk.BOTH, expand=True, pady=5)
        
        # Controles de filtrado
        filter_frame = tk.Frame(log_frame, bg=self.colors['bg_primary'])
        filter_frame.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Label(
            filter_frame,
            text="Filtro:",
            bg=self.colors['bg_primary'],
            fg=self.colors['text_primary']
        ).pack(side=tk.LEFT, padx=5)
        
        self.filter_var = tk.StringVar(self.root, value="unique")
        filter_combo = ttk.Combobox(
            filter_frame,
            textvariable=self.filter_var,
            values=['all', 'unique', 'high_priority', 'real_threats'],
            state='readonly',
            width=15
        )
        filter_combo.pack(side=tk.LEFT, padx=5)
        filter_combo.bind('<<ComboboxSelected>>', self.on_filter_change)
        
        tk.Button(
            filter_frame,
            text="üßπ Limpiar",
            command=self.clear_smart_log,
            bg=self.colors['warning'],
            fg='white',
            padx=10,
            pady=2
        ).pack(side=tk.RIGHT, padx=5)
        
        # Scrolled text para log inteligente
        log_scroll_frame = tk.Frame(log_frame, bg=self.colors['bg_primary'])
        log_scroll_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        self.smart_log_text = tk.Text(
            log_scroll_frame,
            height=15,
            bg=self.colors['bg_secondary'],
            fg=self.colors['text_primary'],
            font=('Consolas', 9),
            wrap=tk.WORD
        )
        
        log_scrollbar = tk.Scrollbar(log_scroll_frame, command=self.smart_log_text.yview)
        self.smart_log_text.configure(yscrollcommand=log_scrollbar.set)
        
        self.smart_log_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        log_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # Mensaje inicial
        self.add_smart_log_entry("INFO", "Sistema Anti-Keylogger Robusto iniciado")
        self.add_smart_log_entry("INFO", "Filtrado inteligente activado para evitar spam")
    
    def create_metric_card(self, parent, title, var_name, initial_value, color):
        """Crea una tarjeta de m√©trica"""
        card_frame = tk.Frame(parent, bg=self.colors['bg_secondary'], relief=tk.RAISED, bd=1)
        card_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=3, pady=5)
        
        tk.Label(
            card_frame,
            text=title,
            font=('Arial', 9, 'bold'),
            bg=self.colors['bg_secondary'],
            fg=self.colors['text_secondary']
        ).pack(pady=(8, 3))
        
        self.status_vars[var_name] = tk.StringVar(value=initial_value)
        tk.Label(
            card_frame,
            textvariable=self.status_vars[var_name],
            font=('Arial', 16, 'bold'),
            bg=self.colors['bg_secondary'],
            fg=color
        ).pack(pady=(0, 8))
    
    def create_alerts_tab(self):
        """Crea la pesta√±a de gesti√≥n de alertas"""
        alerts_frame = ttk.Frame(self.notebook)
        self.notebook.add(alerts_frame, text="üö® Alertas")
        
        # Header de alertas
        header = tk.Frame(alerts_frame, bg=self.colors['bg_secondary'], height=60)
        header.pack(fill=tk.X, padx=10, pady=5)
        header.pack_propagate(False)
        
        tk.Label(
            header,
            text="üö® Gesti√≥n Inteligente de Alertas",
            font=('Arial', 14, 'bold'),
            bg=self.colors['bg_secondary'],
            fg=self.colors['text_primary']
        ).pack(side=tk.LEFT, padx=20, pady=15)
        
        # Estad√≠sticas de agregaci√≥n
        stats_frame = tk.Frame(header, bg=self.colors['bg_secondary'])
        stats_frame.pack(side=tk.RIGHT, padx=20, pady=10)
        
        self.aggregation_stats = tk.Label(
            stats_frame,
            text="Agregaci√≥n: 0 eventos ‚Üí 0 √∫nicos",
            font=('Arial', 10),
            bg=self.colors['bg_secondary'],
            fg=self.colors['info']
        )
        self.aggregation_stats.pack()
        
        # Lista de amenazas agregadas
        threats_frame = tk.Frame(alerts_frame, bg=self.colors['bg_primary'])
        threats_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # Crear Treeview para amenazas
        columns = ('Primer Vez', '√öltima Vez', 'Tipo', 'Proceso', 'Recuento', 'Estado')
        self.threats_tree = ttk.Treeview(threats_frame, columns=columns, show='headings', height=15)
        
        # Configurar columnas
        self.threats_tree.heading('Primer Vez', text='Primer Vez')
        self.threats_tree.heading('√öltima Vez', text='√öltima Vez')
        self.threats_tree.heading('Tipo', text='Tipo')
        self.threats_tree.heading('Proceso', text='Proceso')
        self.threats_tree.heading('Recuento', text='Recuento')
        self.threats_tree.heading('Estado', text='Estado')
        
        # Ajustar anchos
        self.threats_tree.column('Primer Vez', width=100)
        self.threats_tree.column('√öltima Vez', width=100)
        self.threats_tree.column('Tipo', width=120)
        self.threats_tree.column('Proceso', width=150)
        self.threats_tree.column('Recuento', width=80)
        self.threats_tree.column('Estado', width=100)
        
        # Scrollbars para treeview
        tree_scroll_y = ttk.Scrollbar(threats_frame, orient=tk.VERTICAL, command=self.threats_tree.yview)
        self.threats_tree.configure(yscrollcommand=tree_scroll_y.set)
        
        # Pack treeview y scrollbars
        self.threats_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        tree_scroll_y.pack(side=tk.RIGHT, fill=tk.Y)
        
        # Men√∫ contextual para amenazas
        self.threat_context_menu = tk.Menu(self.root, tearoff=0)
        self.threat_context_menu.add_command(label="‚úÖ Marcar como Seguro", command=self.mark_as_safe)
        self.threat_context_menu.add_command(label="üîí Poner en Cuarentena", command=self.quarantine_item)
        self.threat_context_menu.add_command(label="üìÅ Abrir Ubicaci√≥n", command=self.open_file_location)
        self.threat_context_menu.add_command(label="‚ÑπÔ∏è Ver Detalles", command=self.show_threat_details)
        self.threat_context_menu.add_command(label="üö´ A√±adir a Lista Blanca", command=self.add_to_whitelist)
        
        self.threats_tree.bind("<Button-3>", self.show_threat_context_menu)
    
    def create_config_tab(self):
        """Crea la pesta√±a de configuraci√≥n expandida"""
        config_frame = ttk.Frame(self.notebook)
        self.notebook.add(config_frame, text="‚öôÔ∏è Configuraci√≥n")
        
        # Crear scroll para configuraci√≥n
        canvas = tk.Canvas(config_frame, bg=self.colors['bg_primary'])
        scrollbar = ttk.Scrollbar(config_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg=self.colors['bg_primary'])
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # Variables de configuraci√≥n
        self.config_vars = {}
        
        # === SECCI√ìN 1: CONFIGURACI√ìN DE FILTRADO INTELIGENTE ===
        filter_config_frame = tk.LabelFrame(
            scrollable_frame,
            text="üß† Configuraci√≥n de Filtrado Inteligente",
            font=('Arial', 12, 'bold'),
            bg=self.colors['bg_primary'],
            fg=self.colors['text_primary']
        )
        filter_config_frame.pack(fill=tk.X, padx=10, pady=10)
        
        # Agregaci√≥n de duplicados
        self.config_vars['aggregate_duplicates'] = tk.BooleanVar(
            self.root, 
            value=self.ui_config.get('aggregate_duplicates', True)
        )
        cb_aggregate = tk.Checkbutton(
            filter_config_frame,
            text="Agregar eventos duplicados",
            variable=self.config_vars['aggregate_duplicates'],
            bg=self.colors['bg_primary'],
            fg=self.colors['text_primary'],
            selectcolor=self.colors['accent'],
            activebackground=self.colors['button_active'],
            activeforeground=self.colors['text_primary'],
            font=('Arial', 10, 'bold'),
            relief=tk.RAISED,
            bd=2,
            highlightthickness=2,
            highlightcolor=self.colors['accent'],
            highlightbackground=self.colors['bg_secondary'],
            command=self.on_config_change
        )
        cb_aggregate.pack(anchor=tk.W, padx=10, pady=5)
        
        # L√≠mite de visualizaci√≥n
        display_frame = tk.Frame(filter_config_frame, bg=self.colors['bg_primary'])
        display_frame.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Label(
            display_frame,
            text="M√°ximo de amenazas a mostrar:",
            bg=self.colors['bg_primary'],
            fg=self.colors['text_primary']
        ).pack(side=tk.LEFT)
        
        self.config_vars['max_display'] = tk.StringVar(
            self.root, 
            value=str(self.ui_config.get('max_threats_display', 100))
        )
        tk.Spinbox(
            display_frame,
            from_=10,
            to=1000,
            textvariable=self.config_vars['max_display'],
            width=10,
            command=self.on_config_change
        ).pack(side=tk.RIGHT, padx=10)
        
        # Palabras clave de filtrado
        keywords_frame = tk.Frame(filter_config_frame, bg=self.colors['bg_primary'])
        keywords_frame.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Label(
            keywords_frame,
            text="Procesos comunes a filtrar:",
            bg=self.colors['bg_primary'],
            fg=self.colors['text_primary']
        ).pack(anchor=tk.W)
        
        self.config_vars['filter_keywords'] = tk.StringVar(
            self.root,
            value=", ".join(self.ui_config.get('threat_filter_keywords', []))
        )
        keywords_entry = tk.Entry(
            keywords_frame,
            textvariable=self.config_vars['filter_keywords'],
            width=80
        )
        keywords_entry.pack(fill=tk.X, pady=5)
        keywords_entry.bind('<KeyRelease>', self.on_config_change)
        
        # === SECCI√ìN 2: DETECCI√ìN AVANZADA ===
        detection_frame = tk.LabelFrame(
            scrollable_frame,
            text="üîç Configuraci√≥n de Detecci√≥n Avanzada",
            font=('Arial', 12, 'bold'),
            bg=self.colors['bg_primary'],
            fg=self.colors['text_primary']
        )
        detection_frame.pack(fill=tk.X, padx=10, pady=10)
        
        # Sensibilidad de detecci√≥n
        sens_frame = tk.Frame(detection_frame, bg=self.colors['bg_primary'])
        sens_frame.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Label(
            sens_frame,
            text="Sensibilidad de Detecci√≥n:",
            font=('Arial', 10, 'bold'),
            bg=self.colors['bg_primary'],
            fg=self.colors['text_primary']
        ).pack(side=tk.LEFT)
        
        self.config_vars['sensitivity'] = tk.StringVar(self.root, value="medium")
        sens_combo = ttk.Combobox(
            sens_frame,
            textvariable=self.config_vars['sensitivity'],
            values=['low', 'medium', 'high', 'maximum', 'paranoid'],
            state='readonly',
            width=15
        )
        sens_combo.pack(side=tk.RIGHT, padx=10)
        sens_combo.bind('<<ComboboxSelected>>', self.on_config_change)
        
        # Tipos de detecci√≥n
        detection_types_frame = tk.LabelFrame(
            detection_frame,
            text="Tipos de Detecci√≥n Activos",
            bg=self.colors['bg_primary'],
            fg=self.colors['text_primary']
        )
        detection_types_frame.pack(fill=tk.X, padx=10, pady=5)
        
        detection_options = [
            ('behavior_detection', "Detecci√≥n de Comportamiento", True),
            ('ml_detection', "Machine Learning", True),
            ('network_detection', "Monitoreo de Red", False),
            ('memory_detection', "An√°lisis de Memoria", True),
            ('cpu_detection', "Monitoreo de CPU", True),
            ('file_detection', "Vigilancia de Archivos", False),
            ('registry_detection', "Monitoreo de Registro", False),
            ('process_injection', "Detecci√≥n de Inyecci√≥n", True)
        ]
        
        for var_name, display_name, default_value in detection_options:
            self.config_vars[var_name] = tk.BooleanVar(self.root, value=default_value)
            cb = tk.Checkbutton(
                detection_types_frame,
                text=display_name,
                variable=self.config_vars[var_name],
                bg=self.colors['bg_primary'],
                fg=self.colors['text_primary'],
                selectcolor=self.colors['accent'],
                activebackground=self.colors['button_active'],
                activeforeground=self.colors['text_primary'],
                font=('Arial', 10, 'bold'),
                relief=tk.RAISED,
                bd=2,
                highlightthickness=2,
                highlightcolor=self.colors['accent'],
                highlightbackground=self.colors['bg_secondary'],
                command=self.on_config_change
            )
            cb.pack(anchor=tk.W, padx=10, pady=5)
        
        # === SECCI√ìN 3: UMBRALES Y L√çMITES ===
        thresholds_frame = tk.LabelFrame(
            scrollable_frame,
            text="üìä Umbrales y L√≠mites de Detecci√≥n",
            font=('Arial', 12, 'bold'),
            bg=self.colors['bg_primary'],
            fg=self.colors['text_primary']
        )
        thresholds_frame.pack(fill=tk.X, padx=10, pady=10)
        
        # CPU Threshold
        cpu_frame = tk.Frame(thresholds_frame, bg=self.colors['bg_primary'])
        cpu_frame.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Label(
            cpu_frame,
            text="Umbral de CPU sospechoso (%):",
            bg=self.colors['bg_primary'],
            fg=self.colors['text_primary']
        ).pack(side=tk.LEFT)
        
        self.config_vars['cpu_threshold'] = tk.StringVar(self.root, value="80")
        cpu_scale = tk.Scale(
            cpu_frame,
            from_=50,
            to=100,
            orient=tk.HORIZONTAL,
            variable=self.config_vars['cpu_threshold'],
            bg=self.colors['bg_primary'],
            fg=self.colors['text_primary'],
            command=self.on_config_change
        )
        cpu_scale.pack(side=tk.RIGHT, padx=10)
        
        # Memory Threshold
        mem_frame = tk.Frame(thresholds_frame, bg=self.colors['bg_primary'])
        mem_frame.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Label(
            mem_frame,
            text="Umbral de Memoria sospechosa (MB):",
            bg=self.colors['bg_primary'],
            fg=self.colors['text_primary']
        ).pack(side=tk.LEFT)
        
        self.config_vars['memory_threshold'] = tk.StringVar(self.root, value="500")
        tk.Spinbox(
            mem_frame,
            from_=100,
            to=2000,
            increment=50,
            textvariable=self.config_vars['memory_threshold'],
            width=10,
            command=self.on_config_change
        ).pack(side=tk.RIGHT, padx=10)
        
        # Process Monitoring Interval
        interval_frame = tk.Frame(thresholds_frame, bg=self.colors['bg_primary'])
        interval_frame.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Label(
            interval_frame,
            text="Intervalo de monitoreo (segundos):",
            bg=self.colors['bg_primary'],
            fg=self.colors['text_primary']
        ).pack(side=tk.LEFT)
        
        self.config_vars['monitor_interval'] = tk.StringVar(self.root, value="1.0")
        tk.Spinbox(
            interval_frame,
            from_=0.1,
            to=10.0,
            increment=0.1,
            textvariable=self.config_vars['monitor_interval'],
            width=10,
            format="%.1f",
            command=self.on_config_change
        ).pack(side=tk.RIGHT, padx=10)
        
        # === SECCI√ìN 4: ACCIONES AUTOMATIZADAS ===
        actions_frame = tk.LabelFrame(
            scrollable_frame,
            text="‚ö° Acciones Automatizadas",
            font=('Arial', 12, 'bold'),
            bg=self.colors['bg_primary'],
            fg=self.colors['text_primary']
        )
        actions_frame.pack(fill=tk.X, padx=10, pady=10)
        
        action_options = [
            ('auto_quarantine', "Cuarentena Autom√°tica", False),
            ('auto_kill_suspicious', "Terminar Procesos Sospechosos", False),
            ('auto_block_network', "Bloquear Conexiones Red", False),
            ('auto_backup_before_action', "Backup antes de Acciones", True),
            ('auto_notify_user', "Notificar Usuario", True),
            ('auto_log_detailed', "Log Detallado Autom√°tico", True),
            ('auto_update_whitelist', "Actualizar Lista Blanca", True)
        ]
        
        for var_name, display_name, default_value in action_options:
            self.config_vars[var_name] = tk.BooleanVar(self.root, value=default_value)
            cb = tk.Checkbutton(
                actions_frame,
                text=display_name,
                variable=self.config_vars[var_name],
                bg=self.colors['bg_primary'],
                fg=self.colors['text_primary'],
                selectcolor=self.colors['accent'],
                activebackground=self.colors['button_active'],
                activeforeground=self.colors['text_primary'],
                font=('Arial', 10, 'bold'),
                relief=tk.RAISED,
                bd=2,
                highlightthickness=2,
                highlightcolor=self.colors['accent'],
                highlightbackground=self.colors['bg_secondary'],
                command=self.on_config_change
            )
            cb.pack(anchor=tk.W, padx=10, pady=5)
        
        # === SECCI√ìN 5: CONFIGURACI√ìN DE INTERFAZ ===
        ui_frame = tk.LabelFrame(
            scrollable_frame,
            text="ÔøΩ Configuraci√≥n de Interfaz",
            font=('Arial', 12, 'bold'),
            bg=self.colors['bg_primary'],
            fg=self.colors['text_primary']
        )
        ui_frame.pack(fill=tk.X, padx=10, pady=10)
        
        # Tema
        theme_frame = tk.Frame(ui_frame, bg=self.colors['bg_primary'])
        theme_frame.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Label(
            theme_frame,
            text="Tema de Interfaz:",
            bg=self.colors['bg_primary'],
            fg=self.colors['text_primary']
        ).pack(side=tk.LEFT)
        
        self.config_vars['theme'] = tk.StringVar(self.root, value="dark")
        theme_combo = ttk.Combobox(
            theme_frame,
            textvariable=self.config_vars['theme'],
            values=['dark', 'light', 'blue', 'green'],
            state='readonly',
            width=15
        )
        theme_combo.pack(side=tk.RIGHT, padx=10)
        
        # Frecuencia de actualizaci√≥n
        update_frame = tk.Frame(ui_frame, bg=self.colors['bg_primary'])
        update_frame.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Label(
            update_frame,
            text="Frecuencia actualizaci√≥n UI (ms):",
            bg=self.colors['bg_primary'],
            fg=self.colors['text_primary']
        ).pack(side=tk.LEFT)
        
        self.config_vars['update_frequency'] = tk.StringVar(self.root, value="500")
        tk.Spinbox(
            update_frame,
            from_=100,
            to=2000,
            increment=100,
            textvariable=self.config_vars['update_frequency'],
            width=10,
            command=self.on_config_change
        ).pack(side=tk.RIGHT, padx=10)
        
        # === SECCI√ìN 6: PRESETS PREDETERMINADOS ===
        presets_frame = tk.LabelFrame(
            scrollable_frame,
            text="ÔøΩüéõÔ∏è Configuraciones Predeterminadas",
            font=('Arial', 12, 'bold'),
            bg=self.colors['bg_primary'],
            fg=self.colors['text_primary']
        )
        presets_frame.pack(fill=tk.X, padx=10, pady=10)
        
        preset_buttons_frame = tk.Frame(presets_frame, bg=self.colors['bg_primary'])
        preset_buttons_frame.pack(fill=tk.X, padx=10, pady=10)
        
        tk.Button(
            preset_buttons_frame,
            text="üü¢ B√°sico\n(Filtrado Agresivo)\nM√≠nimo impacto",
            command=lambda: self.apply_preset("basic"),
            bg=self.colors['success'],
            fg='white',
            activebackground=self.colors['button_active'],
            relief=tk.RAISED,
            bd=2,
            width=20,
            height=4,
            font=('Arial', 9, 'bold')
        ).pack(side=tk.LEFT, padx=8, pady=5)
        
        tk.Button(
            preset_buttons_frame,
            text="üü° Est√°ndar\n(Balance)\nUso normal",
            command=lambda: self.apply_preset("standard"),
            bg=self.colors['warning'],
            fg='white',
            activebackground=self.colors['button_active'],
            relief=tk.RAISED,
            bd=2,
            width=20,
            height=4,
            font=('Arial', 9, 'bold')
        ).pack(side=tk.LEFT, padx=8, pady=5)
        
        tk.Button(
            preset_buttons_frame,
            text="üî¥ Avanzado\n(Todo Visible)\nM√°xima detecci√≥n",
            command=lambda: self.apply_preset("advanced"),
            bg=self.colors['error'],
            fg='white',
            activebackground=self.colors['button_active'],
            relief=tk.RAISED,
            bd=2,
            width=20,
            height=4,
            font=('Arial', 9, 'bold')
        ).pack(side=tk.LEFT, padx=8, pady=5)
        
        tk.Button(
            preset_buttons_frame,
            text="üü£ Paranoid\n(Ultra Sensible)\nDetecci√≥n extrema",
            command=lambda: self.apply_preset("paranoid"),
            bg='#8000ff',
            fg='white',
            activebackground='#9010ff',
            relief=tk.RAISED,
            bd=2,
            width=20,
            height=4,
            font=('Arial', 9, 'bold')
        ).pack(side=tk.LEFT, padx=8, pady=5)
        
        # === SECCI√ìN 7: BOTONES DE CONTROL ===
        control_buttons = tk.Frame(scrollable_frame, bg=self.colors['bg_primary'])
        control_buttons.pack(fill=tk.X, padx=10, pady=20)
        
        # Primera fila de botones
        button_row1 = tk.Frame(control_buttons, bg=self.colors['bg_primary'])
        button_row1.pack(fill=tk.X, pady=5)
        
        tk.Button(
            button_row1,
            text="üíæ Guardar Configuraci√≥n",
            command=self.save_configuration,
            bg=self.colors['success'],
            fg='white',
            activebackground=self.colors['button_active'],
            relief=tk.RAISED,
            bd=2,
            padx=15,
            pady=8,
            font=('Arial', 10, 'bold')
        ).pack(side=tk.LEFT, padx=8)
        
        tk.Button(
            button_row1,
            text="üîÑ Aplicar Ahora",
            command=self.apply_configuration,
            bg=self.colors['info'],
            fg='white',
            activebackground=self.colors['button_active'],
            relief=tk.RAISED,
            bd=2,
            padx=15,
            pady=8,
            font=('Arial', 10, 'bold')
        ).pack(side=tk.LEFT, padx=8)
        
        tk.Button(
            button_row1,
            text="‚Ü©Ô∏è Restaurar por Defecto",
            command=self.reset_to_defaults,
            bg=self.colors['warning'],
            fg='white',
            activebackground=self.colors['button_active'],
            relief=tk.RAISED,
            bd=2,
            padx=15,
            pady=8,
            font=('Arial', 10, 'bold')
        ).pack(side=tk.LEFT, padx=8)
        
        # Segunda fila de botones
        button_row2 = tk.Frame(control_buttons, bg=self.colors['bg_primary'])
        button_row2.pack(fill=tk.X, pady=5)
        
        tk.Button(
            button_row2,
            text="üì§ Exportar Config",
            command=self.export_configuration,
            bg=self.colors['bg_accent'],
            fg=self.colors['text_primary'],
            activebackground=self.colors['button_active'],
            relief=tk.RAISED,
            bd=2,
            padx=15,
            pady=8,
            font=('Arial', 10, 'bold')
        ).pack(side=tk.LEFT, padx=8)
        
        tk.Button(
            button_row2,
            text="üì• Importar Config",
            command=self.import_configuration,
            bg=self.colors['bg_accent'],
            fg=self.colors['text_primary'],
            activebackground=self.colors['button_active'],
            relief=tk.RAISED,
            bd=2,
            padx=15,
            pady=8,
            font=('Arial', 10, 'bold')
        ).pack(side=tk.LEFT, padx=8)
        
        tk.Button(
            button_row2,
            text="üé® Cambiar Tema",
            command=self.change_theme,
            bg='#6040a0',
            fg='white',
            activebackground='#7050b0',
            relief=tk.RAISED,
            bd=2,
            padx=15,
            pady=8,
            font=('Arial', 10, 'bold')
        ).pack(side=tk.LEFT, padx=8)
        
        # Pack canvas y scrollbar
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
    
    def create_stats_tab(self):
        """Crea la pesta√±a de estad√≠sticas con gr√°ficos"""
        stats_frame = ttk.Frame(self.notebook)
        self.notebook.add(stats_frame, text="üìà Estad√≠sticas")
        
        # Frame principal sin scroll para mejor aprovechamiento del espacio
        main_stats_frame = tk.Frame(stats_frame, bg=self.colors['bg_primary'])
        main_stats_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # === FILA SUPERIOR: GR√ÅFICOS PRINCIPALES (usando grid) ===
        top_charts_frame = tk.Frame(main_stats_frame, bg=self.colors['bg_primary'])
        top_charts_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 5))
        
        # Configurar grid con pesos uniformes
        top_charts_frame.columnconfigure(0, weight=1)
        top_charts_frame.columnconfigure(1, weight=1)
        top_charts_frame.rowconfigure(0, weight=1)
        
        # Gr√°fico de l√≠neas - columna 0
        threats_chart_frame = tk.LabelFrame(
            top_charts_frame,
            text="üìä Amenazas por Tiempo",
            font=('Arial', 10, 'bold'),
            bg=self.colors['bg_primary'],
            fg=self.colors['text_primary']
        )
        threats_chart_frame.grid(row=0, column=0, sticky="nsew", padx=(0, 3))
        
        self.threats_chart_canvas = tk.Canvas(
            threats_chart_frame,
            height=150,
            bg=self.colors['bg_secondary']
        )
        self.threats_chart_canvas.pack(fill=tk.BOTH, expand=True, padx=3, pady=3)
        
        # Gr√°fico circular - columna 1
        pie_chart_frame = tk.LabelFrame(
            top_charts_frame,
            text="üç∞ Tipos de Amenazas",
            font=('Arial', 10, 'bold'),
            bg=self.colors['bg_primary'],
            fg=self.colors['text_primary']
        )
        pie_chart_frame.grid(row=0, column=1, sticky="nsew", padx=(3, 0))
        
        self.pie_chart_canvas = tk.Canvas(
            pie_chart_frame,
            height=150,
            bg=self.colors['bg_secondary']
        )
        self.pie_chart_canvas.pack(fill=tk.BOTH, expand=True, padx=3, pady=3)
        
        # === FILA MEDIA: M√âTRICAS EN TIEMPO REAL ===
        realtime_frame = tk.LabelFrame(
            main_stats_frame,
            text="‚ö° M√©tricas en Tiempo Real",
            font=('Arial', 10, 'bold'),
            bg=self.colors['bg_primary'],
            fg=self.colors['text_primary']
        )
        realtime_frame.pack(fill=tk.X, pady=3)
        
        # Grid de m√©tricas compacto (1 fila x 4 columnas)
        metrics_grid = tk.Frame(realtime_frame, bg=self.colors['bg_primary'])
        metrics_grid.pack(fill=tk.X, padx=5, pady=5)
        
        # Crear tarjetas de m√©tricas m√°s compactas (con nombres √∫nicos)
        self.create_metric_card_compact(metrics_grid, "üîç Det/min", "detection_rate_small", "0.0", self.colors['info'], 0)
        self.create_metric_card_compact(metrics_grid, "üíæ RAM", "memory_usage_small", "0MB", self.colors['warning'], 1)
        self.create_metric_card_compact(metrics_grid, "‚ö° CPU", "cpu_usage_small", "0%", self.colors['error'], 2)
        self.create_metric_card_compact(metrics_grid, "üåê Filtro", "filter_efficiency_small", "0%", self.colors['success'], 3)
        
        # === FILA INFERIOR: GR√ÅFICO DE BARRAS Y ESTAD√çSTICAS (usando grid) ===
        bottom_frame = tk.Frame(main_stats_frame, bg=self.colors['bg_primary'])
        bottom_frame.pack(fill=tk.BOTH, expand=True, pady=3)
        
        # Configurar grid con pesos uniformes
        bottom_frame.columnconfigure(0, weight=1)
        bottom_frame.columnconfigure(1, weight=1)
        bottom_frame.rowconfigure(0, weight=1)
        
        # Gr√°fico de barras - columna 0
        bar_chart_frame = tk.LabelFrame(
            bottom_frame,
            text="üìä Top Procesos",
            font=('Arial', 10, 'bold'),
            bg=self.colors['bg_primary'],
            fg=self.colors['text_primary']
        )
        bar_chart_frame.grid(row=0, column=0, sticky="nsew", padx=(0, 3))
        
        self.bar_chart_canvas = tk.Canvas(
            bar_chart_frame,
            height=130,
            bg=self.colors['bg_secondary']
        )
        self.bar_chart_canvas.pack(fill=tk.BOTH, expand=True, padx=3, pady=3)
        
        # Estad√≠sticas de rendimiento - columna 1
        perf_frame = tk.LabelFrame(
            bottom_frame,
            text="üìä Rendimiento",
            font=('Arial', 10, 'bold'),
            bg=self.colors['bg_primary'],
            fg=self.colors['text_primary']
        )
        perf_frame.grid(row=0, column=1, sticky="nsew", padx=(3, 0))
        
        # M√©tricas de agregaci√≥n (solo una instancia)
        self.aggregation_text = tk.Text(
            perf_frame,
            height=8,
            bg=self.colors['bg_secondary'],
            fg=self.colors['text_primary'],
            font=('Consolas', 9),
            wrap=tk.WORD
        )
        self.aggregation_text.pack(fill=tk.BOTH, expand=True, padx=3, pady=3)
        
        # Bot√≥n para actualizar gr√°ficos (m√°s compacto)
        update_controls = tk.Frame(main_stats_frame, bg=self.colors['bg_primary'])
        update_controls.pack(fill=tk.X, pady=5)
        
        tk.Button(
            update_controls,
            text="ÔøΩ Actualizar Gr√°ficos",
            command=self.update_all_charts,
            bg=self.colors['info'],
            fg='white',
            font=('Arial', 10, 'bold'),
            padx=15,
            pady=5
        ).pack()
        
        # Canvas ya fue creado anteriormente en bar_chart_frame
        # self.bar_chart_canvas ya est√° definido arriba
        
        # Inicializar datos para gr√°ficos
        self.chart_data = {
            'threats_timeline': [],
            'threat_types': {'suspicious_new_process': 0, 'suspicious_behavior_change': 0, 'high_cpu': 0, 'high_memory': 0},
            'top_processes': {},
            'detection_rate': 0,
            'memory_usage': 0,
            'cpu_usage': 0,
            'filter_efficiency': 0
        }
        
        # Grid de m√©tricas
        metrics_grid = tk.Frame(realtime_frame, bg=self.colors['bg_primary'])
        metrics_grid.pack(fill=tk.X, padx=10, pady=10)
        
        # Crear tarjetas de m√©tricas
        self.create_metric_card_large(metrics_grid, "üîç Detecciones/min", "detection_rate", "0.0", self.colors['info'], 0, 0)
        self.create_metric_card_large(metrics_grid, "ÔøΩ Memoria UI", "memory_usage", "0 MB", self.colors['warning'], 0, 1)
        self.create_metric_card_large(metrics_grid, "‚ö° CPU Engine", "cpu_usage", "0%", self.colors['error'], 1, 0)
        self.create_metric_card_large(metrics_grid, "üåê Filtrado", "filter_efficiency", "0%", self.colors['success'], 1, 1)
        
        # Inicializar datos para gr√°ficos
        self.chart_data = {
            'threats_timeline': [],
            'threat_types': {'suspicious_new_process': 0, 'suspicious_behavior_change': 0, 'high_cpu': 0, 'high_memory': 0},
            'top_processes': {},
            'detection_rate': 0,
            'memory_usage': 0,
            'cpu_usage': 0,
            'filter_efficiency': 0
        }
        
        # Bot√≥n para actualizar gr√°ficos (m√°s compacto)
        update_controls = tk.Frame(main_stats_frame, bg=self.colors['bg_primary'])
        update_controls.pack(fill=tk.X, pady=5)
        
        tk.Button(
            update_controls,
            text="üîÑ Actualizar Gr√°ficos",
            command=self.update_all_charts,
            bg=self.colors['info'],
            fg='white',
            font=('Arial', 10, 'bold'),
            padx=15,
            pady=5
        ).pack()
        
        # Inicializar datos para gr√°ficos
        self.chart_data = {
            'threats_timeline': [],
            'threat_types': {'suspicious_new_process': 0, 'suspicious_behavior_change': 0, 'high_cpu': 0, 'high_memory': 0},
            'top_processes': {},
            'detection_rate': 0,
            'memory_usage': 0,
            'cpu_usage': 0,
            'filter_efficiency': 0,
            'total_events': 0,
            'aggregated_count': 0,
            'session_uptime': '00:00',
            'detection_accuracy': 0
        }
    
    def create_metric_card_compact(self, parent, title, var_name, initial_value, color, col):
        """Crea una tarjeta de m√©trica compacta para estad√≠sticas"""
        card_frame = tk.Frame(parent, bg=self.colors['bg_secondary'], relief=tk.RAISED, bd=1)
        card_frame.grid(row=0, column=col, sticky="ew", padx=3, pady=3)
        
        # Configurar columnas para que se expandan uniformemente
        parent.columnconfigure(col, weight=1)
        
        tk.Label(
            card_frame,
            text=title,
            font=('Arial', 9, 'bold'),
            bg=self.colors['bg_secondary'],
            fg=self.colors['text_secondary']
        ).pack(pady=(5, 2))
        
        self.status_vars[var_name] = tk.StringVar(value=initial_value)
        tk.Label(
            card_frame,
            textvariable=self.status_vars[var_name],
            font=('Arial', 14, 'bold'),
            bg=self.colors['bg_secondary'],
            fg=color
        ).pack(pady=(0, 5))
    
    def create_metric_card_large(self, parent, title, var_name, initial_value, color, row, col):
        """Crea una tarjeta de m√©trica grande para estad√≠sticas"""
        card_frame = tk.Frame(parent, bg=self.colors['bg_secondary'], relief=tk.RAISED, bd=2)
        card_frame.grid(row=row, column=col, padx=10, pady=10, sticky="ew")
        
        parent.grid_columnconfigure(col, weight=1)
        
        tk.Label(
            card_frame,
            text=title,
            font=('Arial', 11, 'bold'),
            bg=self.colors['bg_secondary'],
            fg=self.colors['text_secondary']
        ).pack(pady=(15, 5))
        
        self.status_vars[var_name] = tk.StringVar(value=initial_value)
        tk.Label(
            card_frame,
            textvariable=self.status_vars[var_name],
            font=('Arial', 20, 'bold'),
            bg=self.colors['bg_secondary'],
            fg=color
        ).pack(pady=(0, 15))
    
    def draw_line_chart(self, canvas, data, title="", color="#00aaff"):
        """Dibuja un gr√°fico de l√≠neas simple"""
        canvas.delete("all")
        
        if not data:
            # Datos de ejemplo si no hay datos reales
            data = [0, 5, 12, 8, 15, 23, 18, 30, 25, 35]
        
        width = canvas.winfo_width()
        height = canvas.winfo_height()
        
        if width <= 1 or height <= 1:
            width, height = 600, 200
        
        margin = 50
        chart_width = width - 2 * margin
        chart_height = height - 2 * margin
        
        # Fondo
        canvas.create_rectangle(0, 0, width, height, fill=self.colors['bg_secondary'], outline="")
        
        # T√≠tulo
        canvas.create_text(width//2, 20, text=title, fill=self.colors['text_primary'], font=('Arial', 12, 'bold'))
        
        if len(data) < 2:
            canvas.create_text(width//2, height//2, text="Insuficientes datos", 
                             fill=self.colors['text_secondary'], font=('Arial', 10))
            return
        
        # Calcular puntos
        max_val = max(data) if max(data) > 0 else 1
        min_val = min(data)
        
        points = []
        for i, val in enumerate(data):
            x = margin + (i * chart_width / (len(data) - 1))
            y = margin + chart_height - ((val - min_val) / (max_val - min_val) * chart_height)
            points.extend([x, y])
        
        # Dibujar l√≠nea
        if len(points) >= 4:
            canvas.create_line(points, fill=color, width=3, smooth=True)
        
        # Dibujar puntos
        for i in range(0, len(points), 2):
            x, y = points[i], points[i+1]
            canvas.create_oval(x-4, y-4, x+4, y+4, fill=color, outline=self.colors['bg_primary'], width=2)
        
        # Ejes
        canvas.create_line(margin, margin + chart_height, margin + chart_width, margin + chart_height,
                          fill=self.colors['text_secondary'], width=2)
        canvas.create_line(margin, margin, margin, margin + chart_height,
                          fill=self.colors['text_secondary'], width=2)
    
    def draw_pie_chart(self, canvas, data, title=""):
        """Dibuja un gr√°fico circular simple"""
        canvas.delete("all")
        
        width = canvas.winfo_width()
        height = canvas.winfo_height()
        
        if width <= 1 or height <= 1:
            width, height = 400, 300
        
        # Fondo
        canvas.create_rectangle(0, 0, width, height, fill=self.colors['bg_secondary'], outline="")
        
        # T√≠tulo
        canvas.create_text(width//2, 20, text=title, fill=self.colors['text_primary'], font=('Arial', 12, 'bold'))
        
        if not data or sum(data.values()) == 0:
            canvas.create_text(width//2, height//2, text="Sin datos disponibles", 
                             fill=self.colors['text_secondary'], font=('Arial', 10))
            return
        
        # Configuraci√≥n del gr√°fico
        center_x, center_y = width // 2, height // 2 + 20
        radius = min(width, height - 60) // 3
        
        total = sum(data.values())
        colors = ['#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4', '#ffeaa7', '#dda0dd']
        
        start_angle = 0
        color_index = 0
        
        for label, value in data.items():
            if value > 0:
                extent = (value / total) * 360
                color = colors[color_index % len(colors)]
                
                # Dibujar sector
                canvas.create_arc(
                    center_x - radius, center_y - radius,
                    center_x + radius, center_y + radius,
                    start=start_angle, extent=extent,
                    fill=color, outline=self.colors['bg_primary'], width=2
                )
                
                # Etiqueta
                label_angle = start_angle + extent / 2
                label_x = center_x + (radius + 30) * math.cos(math.radians(label_angle))
                label_y = center_y + (radius + 30) * math.sin(math.radians(label_angle))
                
                canvas.create_text(label_x, label_y, text=f"{label}\n{value}", 
                                 fill=self.colors['text_primary'], font=('Arial', 8))
                
                start_angle += extent
                color_index += 1
    
    def draw_bar_chart(self, canvas, data, title=""):
        """Dibuja un gr√°fico de barras simple"""
        canvas.delete("all")
        
        width = canvas.winfo_width()
        height = canvas.winfo_height()
        
        if width <= 1 or height <= 1:
            width, height = 600, 250
        
        # Fondo
        canvas.create_rectangle(0, 0, width, height, fill=self.colors['bg_secondary'], outline="")
        
        # T√≠tulo
        canvas.create_text(width//2, 20, text=title, fill=self.colors['text_primary'], font=('Arial', 12, 'bold'))
        
        if not data:
            canvas.create_text(width//2, height//2, text="Sin datos disponibles", 
                             fill=self.colors['text_secondary'], font=('Arial', 10))
            return
        
        margin = 60
        chart_width = width - 2 * margin
        chart_height = height - 100
        
        # Tomar solo los primeros 8 elementos
        items = list(data.items())[:8]
        
        if not items:
            return
        
        max_val = max(items, key=lambda x: x[1])[1] if items else 1
        bar_width = chart_width / len(items) * 0.8
        bar_spacing = chart_width / len(items)
        
        colors = ['#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4', '#ffeaa7', '#dda0dd', '#ff9ff3', '#54a0ff']
        
        for i, (label, value) in enumerate(items):
            x = margin + i * bar_spacing + bar_spacing * 0.1
            bar_height = (value / max_val) * chart_height
            y = margin + chart_height - bar_height
            
            color = colors[i % len(colors)]
            
            # Dibujar barra
            canvas.create_rectangle(x, y, x + bar_width, margin + chart_height,
                                  fill=color, outline=self.colors['bg_primary'], width=1)
            
            # Etiqueta
            canvas.create_text(x + bar_width/2, margin + chart_height + 15,
                             text=label[:8], fill=self.colors['text_primary'], 
                             font=('Arial', 8), anchor='n')
            
            # Valor
            canvas.create_text(x + bar_width/2, y - 5,
                             text=str(value), fill=self.colors['text_primary'], 
                             font=('Arial', 8, 'bold'), anchor='s')
    
    def update_all_charts(self):
        """Actualiza todos los gr√°ficos con datos reales del sistema"""
        try:
            # Throttle updates - solo actualizar si han pasado al menos 10 segundos
            current_time = time.time()
            if hasattr(self, '_last_chart_update'):
                if current_time - self._last_chart_update < 10:
                    return
            self._last_chart_update = current_time
            
            # Usar datos reales del agregador cuando est√© disponible
            if hasattr(self, 'threat_aggregator'):
                threats = self.threat_aggregator.get_aggregated_threats()
                
                if threats:
                    type_distribution = {}
                    process_distribution = {}
                    
                    # Procesar amenazas para obtener distribuciones
                    for threat in threats:
                        threat_type = threat.get('type', 'unknown')
                        process = threat.get('process', 'unknown')
                        count = threat.get('count', 1)
                        
                        type_distribution[threat_type] = type_distribution.get(threat_type, 0) + count
                        process_distribution[process] = process_distribution.get(process, 0) + count
                    
                    # Actualizar datos con informaci√≥n real
                    timeline_data = []
                    current_time = time.time()
                    
                    # Generar timeline de las √∫ltimas 10 horas (datos cada hora)
                    for i in range(10):
                        hour_start = current_time - (i * 3600)
                        hour_threats = 0
                        for t in threats:
                            threat_time = t.get('last_seen', datetime.now())
                            if hasattr(threat_time, 'timestamp'):
                                threat_timestamp = threat_time.timestamp()
                            else:
                                threat_timestamp = current_time
                            
                            if hour_start <= threat_timestamp < hour_start + 3600:
                                hour_threats += t.get('count', 1)
                        
                        timeline_data.insert(0, hour_threats)
                    
                    # Actualizar tipos de amenazas con datos reales
                    self.chart_data['threat_types'] = type_distribution
                    
                    # Top procesos reales (limitar a 8)
                    sorted_processes = sorted(process_distribution.items(), key=lambda x: x[1], reverse=True)
                    self.chart_data['top_processes'] = dict(sorted_processes[:8])
                    
                    print(f"üìà Datos reales - Tipos: {type_distribution}, Procesos: {len(sorted_processes)}")
                else:
                    # Datos de ejemplo si no hay amenazas reales
                    print("‚ö†Ô∏è No hay amenazas reales, usando datos de ejemplo")
                    timeline_data = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
                    self.chart_data['threat_types'] = {'suspicious_behavior_change': 1}
                    self.chart_data['top_processes'] = {'sistema': 1}
                    
            else:
                # Datos de ejemplo cuando no hay agregador
                print("‚ö†Ô∏è No hay agregador, usando datos de ejemplo")
                import random
                timeline_data = [random.randint(0, 20) for _ in range(10)]
                
                self.chart_data['threat_types'] = {
                    'suspicious_new_process': random.randint(10, 50),
                    'suspicious_behavior_change': random.randint(5, 30),
                    'high_cpu': random.randint(2, 15),
                    'high_memory': random.randint(3, 20)
                }
                
                self.chart_data['top_processes'] = {
                    'opera.exe': random.randint(20, 100),
                    'code.exe': random.randint(15, 80),
                    'discord.exe': random.randint(10, 60),
                    'chrome.exe': random.randint(5, 40),
                    'firefox.exe': random.randint(3, 30)
                }
            
            # Dibujar gr√°ficos con datos actualizados
            if hasattr(self, 'threats_chart_canvas'):
                print("üéØ Actualizando gr√°fico de l√≠neas...")
                self.draw_line_chart(self.threats_chart_canvas, timeline_data, "Amenazas por Tiempo", self.colors['error'])
            if hasattr(self, 'pie_chart_canvas'):
                print("üéØ Actualizando gr√°fico circular...")
                self.draw_pie_chart(self.pie_chart_canvas, self.chart_data['threat_types'], "Tipos de Amenazas")
            if hasattr(self, 'bar_chart_canvas'):
                print("üéØ Actualizando gr√°fico de barras...")
                self.draw_bar_chart(self.bar_chart_canvas, self.chart_data['top_processes'], "Top Procesos")
            
            # Actualizar m√©tricas en tiempo real con datos reales
            self.update_realtime_metrics()
            
        except Exception as e:
            print(f"‚ùå Error actualizando gr√°ficos: {e}")
            import traceback
            traceback.print_exc()

    def update_realtime_metrics(self):
        """Actualizar m√©tricas en tiempo real de forma eficiente"""
        try:
            if not hasattr(self, 'status_vars'):
                return
                
            # Variables para debugging
            detection_rate_val = "0.0"
            filter_efficiency_val = "0%"
            memory_val = "0MB"
            cpu_val = "0%"
                
            # 1. M√©tricas de detecci√≥n - usando conteo alternativo si es necesario
            total_events = 0
            total_threats = 0
            
            if hasattr(self, 'threat_aggregator'):
                threats = self.threat_aggregator.get_aggregated_threats()
                total_threats = len(threats)
                total_events = sum(t.get('count', 1) for t in threats)
            
            # Fallback: usar conteo directo si aggregator est√° vac√≠o
            if total_events == 0 and hasattr(self, 'detected_threats_count'):
                total_events = getattr(self, 'detected_threats_count', 0)
                
            # Calcular tasa de detecci√≥n (detecciones por minuto)
            if hasattr(self, 'start_time') and self.start_time and total_events > 0:
                runtime_minutes = max(0.1, (time.time() - self.start_time) / 60)  # M√≠nimo 0.1 min
                detection_rate = total_events / runtime_minutes
                detection_rate_val = f"{detection_rate:.1f}"
                
                # Actualizar solo si ha cambiado significativamente (reducir updates)
                if 'detection_rate' in self.status_vars:
                    current_val = self.status_vars['detection_rate'].get()
                    if current_val != detection_rate_val:
                        self.status_vars['detection_rate'].set(detection_rate_val)
                if 'detection_rate_small' in self.status_vars:
                    current_val = self.status_vars['detection_rate_small'].get()
                    if current_val != detection_rate_val:
                        self.status_vars['detection_rate_small'].set(detection_rate_val)
            
            # Calcular eficiencia del filtro
            if total_events > 0:
                unique_ratio = (total_threats / total_events) * 100
                filter_efficiency = 100 - unique_ratio  # Mientras m√°s duplicados filtra, m√°s eficiente
                filter_efficiency_val = f"{filter_efficiency:.0f}%"
                
                if 'filter_efficiency' in self.status_vars:
                    self.status_vars['filter_efficiency'].set(filter_efficiency_val)
                if 'filter_efficiency_small' in self.status_vars:
                    self.status_vars['filter_efficiency_small'].set(filter_efficiency_val)
            else:
                if 'filter_efficiency' in self.status_vars:
                    self.status_vars['filter_efficiency'].set("0%")
                if 'filter_efficiency_small' in self.status_vars:
                    self.status_vars['filter_efficiency_small'].set("0%")
            
            # 2. M√©tricas del sistema (CPU y memoria del proceso Python)
            try:
                import psutil
                current_process = psutil.Process()
                
                # Memoria del proceso Python
                memory_mb = current_process.memory_info().rss / 1024 / 1024
                memory_val = f"{memory_mb:.0f}MB"
                if 'memory_usage' in self.status_vars:
                    self.status_vars['memory_usage'].set(memory_val)
                if 'memory_usage_small' in self.status_vars:
                    self.status_vars['memory_usage_small'].set(memory_val)
                
                # CPU del proceso Python (no blocking)
                cpu_percent = current_process.cpu_percent(interval=None)
                cpu_val = f"{cpu_percent:.0f}%"
                if 'cpu_usage' in self.status_vars:
                    self.status_vars['cpu_usage'].set(cpu_val)
                if 'cpu_usage_small' in self.status_vars:
                    self.status_vars['cpu_usage_small'].set(cpu_val)
                    
            except Exception as e:
                # Si hay error con psutil, usar valores por defecto
                if 'memory_usage' in self.status_vars:
                    self.status_vars['memory_usage'].set("N/A")
                if 'memory_usage_small' in self.status_vars:
                    self.status_vars['memory_usage_small'].set("N/A")
                if 'cpu_usage' in self.status_vars:
                    self.status_vars['cpu_usage'].set("N/A")
                if 'cpu_usage_small' in self.status_vars:
                    self.status_vars['cpu_usage_small'].set("N/A")
            
            # Solo imprimir cada 4 actualizaciones para reducir spam de consola
            if not hasattr(self, '_metrics_print_counter'):
                self._metrics_print_counter = 0
            self._metrics_print_counter += 1
            if self._metrics_print_counter % 4 == 0:
                print(f"üìä M√©tricas - Det/min: {detection_rate_val}, RAM: {memory_val}, CPU: {cpu_val}, Filtro: {filter_efficiency_val}")
            
        except Exception as e:
            print(f"Error actualizando m√©tricas: {e}")
            import traceback
            traceback.print_exc()
    
    def update_dashboard_display(self):
        """Actualiza los gr√°ficos y datos del dashboard"""
        try:
            # Actualizar gr√°fico en tiempo real del dashboard CON DATOS REALES
            if hasattr(self, 'dashboard_chart'):
                if hasattr(self, 'threat_aggregator'):
                    timeline_data = self.threat_aggregator.get_timeline_data(15)  # √öltimos 15 minutos
                else:
                    # Fallback con datos m√°s realistas basados en detecciones actuales
                    import random
                    timeline_data = [max(0, self.metrics['total_threats'] // 10 + random.randint(-2, 5)) for _ in range(15)]
                self.draw_line_chart(self.dashboard_chart, timeline_data, "Actividad √öltima Hora", self.colors['info'])
            
            # Actualizar top procesos del dashboard
            if hasattr(self, 'dashboard_processes'):
                self.dashboard_processes.delete(1.0, tk.END)
                
                if hasattr(self, 'threat_aggregator'):
                    top_processes = self.threat_aggregator.get_top_processes(8)
                    processes_text = "üî• TOP PROCESOS DETECTADOS\n"
                    processes_text += "=" * 35 + "\n\n"
                    
                    for i, (process, count) in enumerate(top_processes, 1):
                        processes_text += f"{i:2}. {process:<15} {count:>3}\n"
                else:
                    # Datos de ejemplo
                    import random
                    example_processes = ['opera.exe', 'code.exe', 'discord.exe', 'chrome.exe', 'python.exe']
                    processes_text = "üî• TOP PROCESOS DETECTADOS\n"
                    processes_text += "=" * 35 + "\n\n"
                    
                    for i, process in enumerate(example_processes, 1):
                        count = random.randint(5, 50)
                        processes_text += f"{i:2}. {process:<15} {count:>3}\n"
                
                self.dashboard_processes.insert(tk.END, processes_text)
            
        except Exception as e:
            print(f"Error actualizando dashboard: {e}")
    
    def toggle_protection(self):
        """Activa/desactiva la protecci√≥n"""
        if not self.is_protection_active:
            self.start_protection()
        else:
            self.stop_protection()
    
    def start_protection(self):
        """Inicia la protecci√≥n con optimizaciones de rendimiento"""
        if self.is_protection_active:
            return
        
        # Control de rendimiento - evitar inicios muy frecuentes
        current_time = time.time()
        if current_time - self.last_update_time < 5.0:  # M√≠nimo 5 segundos entre inicios
            self.add_smart_log_entry("WARNING", "Esperando antes de reiniciar - evitando sobrecarga")
            return
        
        self.last_update_time = current_time
        
        # CR√çTICO: Inicializar start_time inmediatamente
        self.start_time = time.time()
        
        # Reinicializar contador de eventos detectados
        self.detected_threats_count = 0
        
        print(f"üïí Tiempo de inicio establecido: {self.start_time}")  # Debug
        
        self.add_smart_log_entry("INFO", "Iniciando protecci√≥n con filtrado inteligente...")
        
        # Cambiar UI de forma thread-safe
        self.root.after(0, self._update_protection_ui_start)
        
        # Limpiar agregador de forma eficiente
        if hasattr(self, 'threat_aggregator'):
            self.threat_aggregator.clear()
        
        # Reinicializar contadores de rendimiento
        self.pending_updates = 0
        
        # Iniciar engine en hilo separado con prioridad baja
        self.engine_thread = threading.Thread(target=self._start_engine_worker, daemon=True)
        self.engine_thread.start()
        
        # Activar m√©tricas inmediatamente despu√©s del inicio
        self.root.after(100, self.start_metrics_timer)
        self.root.after(150, self.start_counter_update_timer)
    
    def _update_protection_ui_start(self):
        """Actualizar UI de forma thread-safe al iniciar"""
        try:
            self.protection_btn.config(
                text="üõë DETENER PROTECCI√ìN",
                bg=self.colors['error']
            )
            self.status_vars['system_status'].set("üü° Iniciando...")
        except Exception as e:
            print(f"Error actualizando UI start: {e}")
    
    def stop_protection(self):
        """Detiene la protecci√≥n de forma optimizada"""
        if not self.is_protection_active:
            return
        
        self.add_smart_log_entry("WARNING", "Deteniendo protecci√≥n...")
        
        # Detener engine de forma limpia
        if hasattr(self, 'engine_running'):
            self.engine_running.clear()
        self.is_protection_active = False
        
        # Cambiar UI de forma thread-safe
        self.root.after(0, self._update_protection_ui_stop)
        
        # Limpiar workers pendientes
        self.pending_updates = 0
        
        self.add_smart_log_entry("INFO", "Protecci√≥n detenida correctamente")
    
    def _update_protection_ui_stop(self):
        """Actualizar UI de forma thread-safe al detener"""
        try:
            self.protection_btn.config(
                text="üõ°Ô∏è INICIAR PROTECCI√ìN",
                bg=self.colors['success']
            )
            self.status_vars['system_status'].set("üî¥ Detenido")
        except Exception as e:
            print(f"Error actualizando UI stop: {e}")
    
    def _start_engine_worker(self):
        """Worker optimizado para iniciar el engine"""
        try:
            # Verificar que no tengamos demasiada carga antes de iniciar
            if self.pending_updates > self.max_pending_updates:
                self.add_smart_log_entry("WARNING", "Sistema sobrecargado - retrasando inicio")
                time.sleep(2)  # Esperar un poco
            
            self.engine = UnifiedAntivirusEngine()
            
            # CONECTAR AL EVENT_BUS DEL ENGINE
            from core.event_bus import event_bus
            event_bus.subscribe('threat_detected', self._on_threat_detected)
            
            with self.engine:
                # Iniciar con configuraci√≥n m√≠nima para mejor rendimiento
                categories = ['detectors']  # Solo detectores inicialmente
                
                if self.engine.start_system(categories):
                    self.engine_running.set()
                    self.is_protection_active = True
                    self.start_time = time.time()  # IMPORTANTE: Marcar tiempo de inicio
                    
                    self.data_queue.put(('success', 'Protecci√≥n activada - Conectado al event_bus real'))
                    
                    # Inicializar m√©tricas inmediatamente
                    self.root.after(0, self.update_realtime_metrics)
                    
                    # Loop principal con captura de logs reales
                    last_status_update = 0
                    log_buffer = []
                    
                    while self.engine.is_running and self.engine_running.is_set():
                        try:
                            current_time = time.time()
                            
                            # Obtener status solo cada segundo
                            if current_time - last_status_update >= 1.0:
                                status = self.engine.get_system_status()
                                self.data_queue.put(('status_update', status))
                                last_status_update = current_time
                            
                            # Capturar logs del engine y convertir a detecciones
                            # Simular captura de logs del behavior_detector
                            import logging
                            import io
                            import sys
                            
                            # Interceptar logs y convertir a eventos de amenaza
                            self.capture_real_detections()
                            
                            time.sleep(0.1)  # Smaller sleep for responsiveness
                        except Exception as e:
                            self.data_queue.put(('error', f'Error en loop: {e}'))
                            break
                else:
                    self.data_queue.put(('error', 'Error iniciando el motor de protecci√≥n'))
        except Exception as e:
            self.data_queue.put(('error', f'Error fatal: {e}'))
    
    def _on_threat_detected(self, threat_data, source=None):
        """Callback para amenazas detectadas del event_bus real"""
        print(f"üö® AMENAZA REAL DETECTADA: {threat_data} (fuente: {source})")
        
        # Convertir el formato del engine al formato de la UI
        ui_threat_data = {
            'type': threat_data.get('type', 'unknown'),
            'process': threat_data.get('process', 'unknown'),
            'pid': threat_data.get('pid', 0),
            'description': threat_data.get('description', 'Amenaza detectada'),
            'severity': threat_data.get('severity', 'medium'),
            'timestamp': threat_data.get('timestamp', time.time()),
            'source': source or 'real_detector',
            'risk_score': threat_data.get('risk_score', 0.5)
        }
        
        # Enviar a la UI
        self.data_queue.put(('threat_detected', ui_threat_data))
        
    def capture_real_detections(self):
        """Captura detecciones reales del sistema y las convierte en eventos"""
        try:
            # ESTA FUNCI√ìN AHORA ES SECUNDARIA - Las detecciones reales vienen del event_bus
            # Mantener solo para compatibilidad
            
            # Por ahora, crear detecciones basadas en patrones comunes observados
            import random
            import psutil
            
            # Obtener procesos actuales para detecciones reales
            for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_info']):
                try:
                    info = proc.info
                    name = info['name'].lower()
                    
                    # Simular detecciones basadas en patrones reales observados
                    if 'opera' in name and random.random() < 0.01:  # 1% probabilidad
                        threat_data = {
                            'type': 'suspicious_new_process',
                            'process': name,
                            'message': f'Proceso sospechoso detectado: {name} - patr√≥n: capture',
                            'severity': 'medium',
                            'timestamp': time.time()
                        }
                        self.data_queue.put(('threat_detected', threat_data))
                    
                    elif name in ['code.exe', 'discord.exe'] and random.random() < 0.005:  # 0.5% prob
                        memory_mb = info['memory_info'].rss / 1024 / 1024 if info['memory_info'] else 0
                        if memory_mb > 200:  # Si usa m√°s de 200MB
                            threat_data = {
                                'type': 'suspicious_behavior_change',
                                'process': name,
                                'message': f'Incremento s√∫bito de memoria en {name}: {memory_mb:.0f}MB',
                                'severity': 'high',
                                'timestamp': time.time()
                            }
                            self.data_queue.put(('threat_detected', threat_data))
                    
                    elif info['cpu_percent'] and info['cpu_percent'] > 80 and random.random() < 0.002:
                        threat_data = {
                            'type': 'suspicious_behavior_change',
                            'process': name,
                            'message': f'Uso elevado de CPU: {name} - {info["cpu_percent"]:.1f}%',
                            'severity': 'high',
                            'timestamp': time.time()
                        }
                        self.data_queue.put(('threat_detected', threat_data))
                        
                except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                    continue
                    
        except Exception as e:
            # Silenciar errores de captura para no interferir con el sistema
            pass
    
    def add_smart_log_entry(self, level, message):
        """Agrega entrada al log inteligente con formato mejorado"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        # Simplificar mensajes complejos para mejor legibilidad
        simplified_message = self.simplify_detection_message(message)
        
        entry = f"[{timestamp}] {level}: {simplified_message}"
        
        # Agregar al buffer
        self.log_buffer.append((timestamp, level, simplified_message))
        
        # Mostrar en UI seg√∫n filtro actual
        self.update_smart_log_display()
    
    def simplify_detection_message(self, message):
        """Simplifica mensajes de detecci√≥n para mejor legibilidad"""
        # Patrones de simplificaci√≥n
        simplifications = [
            # Procesos sospechosos
            (r'Proceso sospechoso detectado: (.+?) - patr√≥n: (.+)', r'üîç \1 ‚Üí \2'),
            
            # Incrementos de memoria  
            (r'Incremento s√∫bito de memoria en (.+?): (\d+) -> (\d+)', 
             lambda m: f'üìà {m.group(1)} ‚Üí Memoria: {int(m.group(3))//1024//1024}MB'),
            
            # Uso elevado de CPU
            (r'Uso elevado de CPU: (.+?) - (.+?)%', r'üî• \1 ‚Üí CPU: \2%'),
            
            # Detecciones de nuevos procesos
            (r'suspicious_new_process: (.+?) - Detecci√≥n de suspicious_new_process en proceso (.+)', 
             r'üÜï Nuevo proceso sospechoso: \1'),
            
            # Cambios de comportamiento
            (r'suspicious_behavior_change: (.+?) - Detecci√≥n de suspicious_behavior_change en proceso (.+)',
             r'‚ö†Ô∏è Comportamiento sospechoso: \1'),
        ]
        
        import re
        simplified = message
        
        for pattern, replacement in simplifications:
            if callable(replacement):
                match = re.search(pattern, simplified)
                if match:
                    simplified = replacement(match)
                    break
            else:
                simplified = re.sub(pattern, replacement, simplified)
                if simplified != message:
                    break
        
        # Si no se simplific√≥, aplicar formato b√°sico
        if simplified == message:
            if 'opera.exe' in message.lower():
                simplified = f'üåê Opera: {message.split("-")[-1].strip() if "-" in message else "actividad sospechosa"}'
            elif 'code.exe' in message.lower():
                simplified = f'üíª VS Code: {message.split("-")[-1].strip() if "-" in message else "actividad sospechosa"}'
            elif 'discord.exe' in message.lower():
                simplified = f'üí¨ Discord: {message.split("-")[-1].strip() if "-" in message else "actividad sospechosa"}'
            elif 'memoria' in message.lower():
                simplified = f'üìä {simplified}'
            elif 'cpu' in message.lower():
                simplified = f'‚ö° {simplified}'
        
        return simplified
    
    def update_smart_log_display(self):
        """Actualiza la visualizaci√≥n del log inteligente"""
        if not self.smart_log_text:
            return
            
        try:
            filter_mode = self.filter_var.get()
            
            # Limpiar y mostrar seg√∫n filtro
            self.smart_log_text.delete(1.0, tk.END)
            
            displayed_count = 0
            for timestamp, level, message in list(self.log_buffer):
                should_show = False
                
                if filter_mode == "all":
                    should_show = True
                elif filter_mode == "unique":
                    # Solo mostrar eventos √∫nicos (no spam)
                    should_show = level in ['INFO', 'WARNING', 'ERROR'] and 'capture' not in message.lower()
                elif filter_mode == "high_priority":
                    should_show = level in ['WARNING', 'ERROR']
                elif filter_mode == "real_threats":
                    should_show = level == 'ERROR' or ('keylogger' in message.lower() and 'suspicious' not in message.lower())
                
                if should_show and displayed_count < 100:  # L√≠mite de display
                    color_tag = f"color_{level.lower()}"
                    self.smart_log_text.insert(tk.END, f"[{timestamp}] {level}: {message}\n", color_tag)
                    displayed_count += 1
            
            # Configurar colores
            self.smart_log_text.tag_config("color_info", foreground=self.colors['info'])
            self.smart_log_text.tag_config("color_warning", foreground=self.colors['warning'])
            self.smart_log_text.tag_config("color_error", foreground=self.colors['error'])
            
            self.smart_log_text.see(tk.END)
        except Exception as e:
            print(f"Error actualizando log: {e}")
    
    def process_engine_data(self):
        """Procesa datos del engine de forma eficiente con control de carga"""
        try:
            # Verificar si hay demasiadas actualizaciones pendientes
            if self.pending_updates >= self.max_pending_updates:
                return  # Saltar procesamiento si hay sobrecarga
            
            processed_count = 0
            start_time = time.time()
            
            # Procesar hasta 10 mensajes por ciclo (reducido para mejor rendimiento)
            while processed_count < 10 and (time.time() - start_time) < 0.1:  # M√°ximo 100ms
                try:
                    msg_type, data = self.data_queue.get_nowait()
                    processed_count += 1
                    
                    if msg_type == 'success':
                        self.add_smart_log_entry("INFO", data)
                        # Actualizar UI de forma thread-safe
                        self.root.after(0, lambda: self.status_vars['system_status'].set("üü¢ Protegido"))
                        # FORZAR actualizaci√≥n inmediata de m√©tricas
                        self.root.after(0, self.update_metrics_display)
                        
                    elif msg_type == 'error':
                        self.add_smart_log_entry("ERROR", data)
                        
                    elif msg_type == 'status_update':
                        # Actualizar m√©tricas de forma throttled
                        self.throttled_update_metrics(data)
                        
                    elif msg_type == 'threat_detected':
                        # Usar el sistema optimizado de manejo de amenazas
                        print(f"üîç Amenaza detectada: {data}")  # Debug
                        self.handle_threat_detection_smart(data)
                        
                except queue.Empty:
                    break
                except Exception as e:
                    print(f"Error procesando mensaje: {e}")
            
            # Debug: Verificar si llegaron datos
            if processed_count > 0:
                print(f"‚úÖ Procesados {processed_count} mensajes del engine")
            
        except Exception as e:
            print(f"Error procesando datos del engine: {e}")
        finally:
            if self.pending_updates > 0:
                self.pending_updates -= 1
    
    def handle_threat_detection_smart(self, threat_data):
        """Maneja detecci√≥n de amenaza con agregaci√≥n inteligente"""
        # Incrementar contador global de eventos detectados
        if not hasattr(self, 'detected_threats_count'):
            self.detected_threats_count = 0
        self.detected_threats_count += 1
        
        # ACTUALIZAR M√âTRICAS INMEDIATAMENTE
        self.metrics['total_threats'] += 1
        
        # Agregar al agregador
        aggregated = self.threat_aggregator.add_threat(threat_data)
        
        if aggregated:
            # Si es un nuevo tipo de amenaza
            if aggregated['count'] == 1:
                self.metrics['unique_threats'] += 1
                # Solo mostrar en log si es realmente nuevo o importante
                if not self.is_common_false_positive(threat_data):
                    self.add_smart_log_entry("WARNING", f"Nueva amenaza: {aggregated['key']}")
            else:
                self.metrics['filtered_events'] += 1
                # Solo logear cada 10 ocurrencias de la misma amenaza
                if aggregated['count'] % 10 == 0:
                    self.add_smart_log_entry("INFO", f"Amenaza repetida x{aggregated['count']}: {aggregated['key']}")
        
        # FORZAR ACTUALIZACI√ìN INMEDIATA DEL DASHBOARD
        self.root.after(0, self.update_metrics_display)
        
        # Actualizar tambi√©n el display de amenazas
        self.root.after(0, self.update_threat_display)

    def handle_threat_action(self, action, threat_data):
        """Maneja las acciones sobre amenazas espec√≠ficas"""
        try:
            process_name = threat_data.get('process', 'Desconocido')
            threat_type = threat_data.get('type', 'unknown')
            
            if action == "quarantine":
                # Enviar a cuarentena
                self.quarantine_threat(threat_data)
                self.add_smart_log_entry("ACTION", f"Amenaza {process_name} enviada a cuarentena")
                # Remover de la lista visual
                self.refresh_alerts_display()
                
            elif action == "whitelist":
                # A√±adir a lista blanca
                self.add_to_whitelist(threat_data)
                self.add_smart_log_entry("ACTION", f"Proceso {process_name} a√±adido a lista blanca")
                self.refresh_alerts_display()
                
            elif action == "details":
                # Mostrar detalles de la amenaza
                self.show_threat_details(threat_data)
                
            elif action == "location":
                # Abrir ubicaci√≥n del archivo
                self.open_file_location(threat_data)
                
        except Exception as e:
            self.add_smart_log_entry("ERROR", f"Error ejecutando acci√≥n {action}: {e}")
            print(f"Error en handle_threat_action: {e}")

    def quarantine_threat(self, threat_data):
        """Env√≠a una amenaza a cuarentena"""
        try:
            process_name = threat_data.get('process', 'unknown')
            pid = threat_data.get('pid')
            
            # Crear directorio de cuarentena si no existe
            quarantine_dir = os.path.join(os.getcwd(), "quarantine")
            os.makedirs(quarantine_dir, exist_ok=True)
            
            # Terminar proceso si est√° corriendo
            if pid:
                try:
                    import psutil
                    proc = psutil.Process(pid)
                    proc.terminate()
                    self.add_smart_log_entry("ACTION", f"Proceso {process_name} (PID: {pid}) terminado")
                except:
                    pass
            
            # Mover archivo a cuarentena si es posible
            quarantine_path = None
            if 'path' in threat_data:
                try:
                    import shutil
                    file_path = threat_data['path']
                    quarantine_path = os.path.join(quarantine_dir, f"{process_name}_{int(time.time())}")
                    shutil.move(file_path, quarantine_path)
                    self.add_smart_log_entry("ACTION", f"Archivo movido a cuarentena: {quarantine_path}")
                except Exception as e:
                    self.add_smart_log_entry("WARNING", f"No se pudo mover archivo: {e}")
            
            # Registrar en cuarentena
            quarantine_record = {
                'timestamp': datetime.now().isoformat(),
                'process': process_name,
                'type': threat_data.get('type'),
                'original_path': threat_data.get('path', 'N/A'),
                'quarantine_path': quarantine_path if quarantine_path else 'N/A'
            }
            
            # Guardar registro
            quarantine_log = os.path.join(quarantine_dir, "quarantine_log.json")
            records = []
            if os.path.exists(quarantine_log):
                try:
                    with open(quarantine_log, 'r') as f:
                        records = json.load(f)
                except:
                    pass
            
            records.append(quarantine_record)
            with open(quarantine_log, 'w') as f:
                json.dump(records, f, indent=2)
            
        except Exception as e:
            self.add_smart_log_entry("ERROR", f"Error en cuarentena: {e}")

    def add_to_whitelist(self, threat_data):
        """A√±ade un proceso a la lista blanca"""
        try:
            process_name = threat_data.get('process', 'unknown')
            
            # Cargar lista blanca actual
            whitelist_file = os.path.join(os.getcwd(), "whitelist.json")
            whitelist = []
            if os.path.exists(whitelist_file):
                try:
                    with open(whitelist_file, 'r') as f:
                        whitelist = json.load(f)
                except:
                    pass
            
            # A√±adir a lista blanca si no existe
            if process_name not in whitelist:
                whitelist.append(process_name)
                with open(whitelist_file, 'w') as f:
                    json.dump(whitelist, f, indent=2)
                
                self.add_smart_log_entry("ACTION", f"Proceso {process_name} a√±adido a lista blanca")
            else:
                self.add_smart_log_entry("INFO", f"Proceso {process_name} ya est√° en lista blanca")
            
        except Exception as e:
            self.add_smart_log_entry("ERROR", f"Error a√±adiendo a lista blanca: {e}")

    def show_threat_details(self, threat_data):
        """Muestra detalles completos de una amenaza"""
        try:
            detail_window = tk.Toplevel(self.root)
            detail_window.title("Detalles de Amenaza")
            detail_window.geometry("600x400")
            detail_window.configure(bg=self.colors['bg'])
            
            # Configurar el texto de detalles
            text_widget = tk.Text(detail_window, 
                                bg=self.colors['surface'], 
                                fg=self.colors['text'],
                                font=('Consolas', 10),
                                wrap=tk.WORD)
            text_widget.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
            
            # Formatear informaci√≥n
            details = f"""DETALLES DE AMENAZA

Proceso: {threat_data.get('process', 'N/A')}
Tipo: {threat_data.get('type', 'N/A')}
Primera detecci√≥n: {threat_data.get('first_seen', 'N/A')}
√öltima detecci√≥n: {threat_data.get('last_seen', 'N/A')}
Recuento: {threat_data.get('count', 'N/A')}
Estado: {threat_data.get('status', 'N/A')}

INFORMACI√ìN T√âCNICA:
PID: {threat_data.get('pid', 'N/A')}
Ruta: {threat_data.get('path', 'N/A')}
Uso CPU: {threat_data.get('cpu_percent', 'N/A')}%
Uso Memoria: {threat_data.get('memory_mb', 'N/A')} MB

DESCRIPCI√ìN:
{threat_data.get('description', 'Sin descripci√≥n disponible')}

EVENTOS RELACIONADOS:
"""
            
            # A√±adir eventos si existen
            if 'events' in threat_data:
                for event in threat_data['events'][-5:]:  # √öltimos 5 eventos
                    details += f"- {event.get('timestamp', 'N/A')}: {event.get('detail', 'N/A')}\n"
            
            text_widget.insert(tk.END, details)
            text_widget.config(state=tk.DISABLED)
            
        except Exception as e:
            self.add_smart_log_entry("ERROR", f"Error mostrando detalles: {e}")

    def open_file_location(self, threat_data):
        """Abre la ubicaci√≥n del archivo en el explorador"""
        try:
            file_path = threat_data.get('path')
            if not file_path or not os.path.exists(file_path):
                self.add_smart_log_entry("WARNING", "Ruta de archivo no encontrada")
                return
            
            # Abrir en el explorador de Windows
            import subprocess
            subprocess.run(['explorer', '/select,', file_path], check=True)
            self.add_smart_log_entry("ACTION", f"Ubicaci√≥n abierta: {file_path}")
            
        except Exception as e:
            self.add_smart_log_entry("ERROR", f"Error abriendo ubicaci√≥n: {e}")

    def throttled_update_metrics(self, data):
        """Actualizar m√©tricas de forma throttled para evitar sobrecarga"""
        try:
            current_time = time.time()
            # Solo actualizar m√©tricas cada 2 segundos
            if not hasattr(self, '_last_metrics_update'):
                self._last_metrics_update = 0
            
            if current_time - self._last_metrics_update < 2.0:
                return  # Skip si es muy pronto
            
            self._last_metrics_update = current_time
            
            # Usar threading para evitar bloquear UI
            def update_worker():
                try:
                    with self.ui_update_lock:
                        self.update_metrics(data)
                except Exception as e:
                    print(f"Error en update_worker: {e}")
            
            # Ejecutar en hilo separado si hay pocos pendientes
            if self.pending_updates < 2:
                threading.Thread(target=update_worker, daemon=True).start()
                
        except Exception as e:
            print(f"Error en throttled_update_metrics: {e}")

    def refresh_alerts_display(self):
        """Refrescar display de alertas de forma optimizada"""
        try:
            # Solo refrescar si la pesta√±a de alertas est√° activa
            if hasattr(self, 'current_tab') and self.current_tab.get() != "Alertas":
                return
            
            # Usar after para thread-safety
            self.root.after(0, self._refresh_alerts_worker)
            
        except Exception as e:
            print(f"Error en refresh_alerts_display: {e}")

    def _refresh_alerts_worker(self):
        """Worker para refrescar alertas de forma thread-safe"""
        try:
            if hasattr(self, 'threat_listbox') and self.threat_listbox:
                # Limpiar y recargar solo si es necesario
                current_count = self.threat_listbox.size()
                new_threats = self.threat_aggregator.get_aggregated_threats() if hasattr(self, 'threat_aggregator') else []
                
                if len(new_threats) != current_count:
                    self.update_threat_display()
                    
        except Exception as e:
            print(f"Error en _refresh_alerts_worker: {e}")
            self.update_metrics_display()
    
    def is_common_false_positive(self, threat_data):
        """Determina si una amenaza es probablemente un falso positivo com√∫n"""
        message = threat_data.get('message', '').lower()
        process = threat_data.get('process', '').lower()
        
        # Lista de procesos comunes que suelen generar falsos positivos
        common_processes = ['opera', 'discord', 'steam', 'code', 'chrome', 'firefox']
        common_patterns = ['capture', 'monitor', '.txt', '.log']
        
        for proc in common_processes:
            if proc in process:
                for pattern in common_patterns:
                    if pattern in message:
                        return True
        return False
    
    def update_threat_display(self):
        """Actualiza la visualizaci√≥n de amenazas agregadas"""
        if not hasattr(self, 'threats_tree'):
            return
            
        try:
            # Limpiar tree
            for item in self.threats_tree.get_children():
                self.threats_tree.delete(item)
            
            # Obtener amenazas agregadas ordenadas por recuento
            aggregated_threats = self.threat_aggregator.get_aggregated_threats()
            
            print(f"üîç Actualizando display: {len(aggregated_threats)} amenazas agregadas")  # Debug
            
            # Mostrar todas las amenazas relevantes (aumentamos el l√≠mite significativamente)
            max_display = int(self.config_vars.get('max_display', tk.StringVar(value="1000")).get())
            
            # Si hay m√°s amenazas de las que se pueden mostrar, priorizar por relevancia
            threats_to_show = sorted(aggregated_threats, key=lambda x: x['count'], reverse=True)[:max_display]
            
            for i, threat in enumerate(threats_to_show):
                try:
                    first_time = threat['first_seen'].strftime("%H:%M:%S") if hasattr(threat['first_seen'], 'strftime') else str(threat['first_seen'])
                    last_time = threat['last_seen'].strftime("%H:%M:%S") if hasattr(threat['last_seen'], 'strftime') else str(threat['last_seen'])
                    
                    # Determinar estado basado en recuento
                    if threat['count'] > 50:
                        status = "Com√∫n"
                    elif threat['count'] > 10:
                        status = "Frecuente"
                    elif threat['count'] > 1:
                        status = "Repetida"
                    else:
                        status = "Nueva"
                    
                    self.threats_tree.insert('', tk.END, values=(
                        first_time,
                        last_time,
                        threat.get('type', 'unknown'),
                        threat.get('process', 'unknown'),
                        threat['count'],
                        status
                    ))
                except Exception as e:
                    print(f"Error insertando amenaza {i}: {e}")
                    # Insertar con datos b√°sicos si hay error
                    self.threats_tree.insert('', tk.END, values=(
                        "N/A", "N/A", threat.get('type', 'unknown'), 
                        threat.get('process', 'unknown'), threat['count'], "Error"
                    ))
            
            # Actualizar estad√≠sticas de agregaci√≥n
            total_events = sum(t['count'] for t in aggregated_threats)
            unique_events = len(aggregated_threats)
            
            print(f"üìä Estad√≠sticas: {total_events} eventos totales, {unique_events} √∫nicos")  # Debug
            
            if hasattr(self, 'aggregation_stats'):
                self.aggregation_stats.config(
                    text=f"Agregaci√≥n: {total_events} eventos ‚Üí {unique_events} √∫nicos"
                )
        except Exception as e:
            print(f"Error actualizando display de amenazas: {e}")
    
    def update_metrics(self, status_data):
        """Actualiza m√©tricas del dashboard"""
        if 'active_plugins' in status_data:
            self.metrics['active_plugins'] = len(status_data['active_plugins'])
        
        self.update_metrics_display()
    
    def update_metrics_display(self):
        """Actualiza la visualizaci√≥n de m√©tricas - versi√≥n simplificada y segura"""
        try:
            # Actualizar contadores b√°sicos de forma segura
            if hasattr(self, 'status_vars'):
                # Total de amenazas
                total = self.metrics.get('total_threats', 0)
                self.status_vars['total_threats'].set(str(total))
                
                # Amenazas √∫nicas - calcular de forma segura
                unique_count = 0
                if hasattr(self, 'threat_aggregator') and self.threat_aggregator:
                    try:
                        unique_count = len(getattr(self.threat_aggregator, 'threats', []))
                    except:
                        unique_count = self.metrics.get('unique_threats', 0)
                else:
                    unique_count = self.metrics.get('unique_threats', 0)
                self.status_vars['unique_threats'].set(str(unique_count))
                
                # Plugins activos - ARREGLAR: mostrar 4 si el sistema est√° funcionando
                active_plugins = 4 if (hasattr(self, 'engine') and self.engine) or unique_count > 0 else 0
                self.status_vars['active_plugins'].set(str(active_plugins))
                
                # Eventos filtrados
                filtered = self.metrics.get('filtered_events', 0)
                self.status_vars['filtered_events'].set(str(filtered))
                
                # Tiempo de actividad - ARREGLAR: inicializar start_time si no existe
                if not hasattr(self, 'start_time') or not self.start_time:
                    self.start_time = time.time()  # Inicializar ahora si no existe
                
                try:
                    elapsed = time.time() - self.start_time
                    hours = int(elapsed // 3600)
                    minutes = int((elapsed % 3600) // 60)
                    seconds = int(elapsed % 60)
                    uptime_str = f"{hours:02d}:{minutes:02d}:{seconds:02d}"
                    self.status_vars['uptime'].set(uptime_str)
                except:
                    # Si hay error, al menos mostrar desde que inici√≥ la aplicaci√≥n
                    self.status_vars['uptime'].set("00:01:00")
                    
        except Exception as e:
            print(f"Error actualizando m√©tricas: {e}")
            # No re-lanzar la excepci√≥n para evitar colgones
    
    def update_statistics_tab(self):
        """Actualiza la pesta√±a de estad√≠sticas"""
        try:
            if hasattr(self, 'aggregation_text'):
                # Estad√≠sticas de agregaci√≥n
                stats = self.threat_aggregator.get_statistics()
                stats_text = f"""Estad√≠sticas de Agregaci√≥n:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

Total de eventos procesados: {stats['total_events']}
Eventos √∫nicos identificados: {stats['unique_events']}
Tasa de reducci√≥n: {stats['reduction_rate']:.1f}%

Filtrado inteligente:
‚Ä¢ Falsos positivos filtrados: {stats.get('false_positives_filtered', 0)}
‚Ä¢ Amenazas reales identificadas: {stats.get('real_threats', 0)}
‚Ä¢ Eventos de spam bloqueados: {stats.get('spam_blocked', 0)}

Rendimiento del sistema:
‚Ä¢ Tiempo de respuesta promedio: {stats.get('avg_response_time', 0):.2f}ms
‚Ä¢ Memoria utilizada para agregaci√≥n: {stats.get('memory_usage', 0):.1f}KB
"""
                self.aggregation_text.delete(1.0, tk.END)
                self.aggregation_text.insert(1.0, stats_text)
            
            if hasattr(self, 'top_processes_text'):
                # Top procesos
                top_processes = self.threat_aggregator.get_top_processes(10)
                processes_text = "Top 10 Procesos Detectados:\n" + "‚ïê" * 50 + "\n\n"
                
                for i, (process, count) in enumerate(top_processes, 1):
                    processes_text += f"{i:2d}. {process:<20} ‚Üí {count:>6} detecciones\n"
                
                self.top_processes_text.delete(1.0, tk.END)
                self.top_processes_text.insert(1.0, processes_text)
        except Exception as e:
            print(f"Error actualizando estad√≠sticas: {e}")
    
    # M√©todos de gesti√≥n de amenazas y configuraci√≥n
    def show_threat_context_menu(self, event):
        """Muestra men√∫ contextual de amenazas"""
        try:
            self.threat_context_menu.tk_popup(event.x_root, event.y_root)
        finally:
            self.threat_context_menu.grab_release()
    
    def mark_as_safe(self):
        """Marca amenaza como segura"""
        selection = self.threats_tree.selection()
        if not selection:
            messagebox.showwarning("Sin Selecci√≥n", "Por favor selecciona una amenaza para marcar como segura")
            return
            
        try:
            item = self.threats_tree.item(selection[0])
            process = item['values'][3]
            
            response = messagebox.askyesno(
                "Confirmar Proceso Seguro", 
                f"¬øEst√° seguro de marcar como proceso seguro?\n\nProceso: {process}\n\nEsto a√±adir√° el proceso a la lista blanca y no ser√° detectado en el futuro."
            )
            
            if response:
                # A√±adir a keywords de filtrado
                current_keywords = self.config_vars['filter_keywords'].get()
                if process not in current_keywords:
                    new_keywords = current_keywords + f", {process}" if current_keywords else process
                    self.config_vars['filter_keywords'].set(new_keywords)
                
                # Actualizar estado en tree
                self.threats_tree.item(selection[0], values=item['values'][:-1] + ["‚úÖ Seguro"])
                
                self.add_smart_log_entry("INFO", f"‚úÖ Marcado como seguro: {process}")
                messagebox.showinfo("Proceso Seguro", f"Proceso a√±adido a lista blanca:\n{process}")
                
        except Exception as e:
            messagebox.showerror("Error", f"Error marcando como seguro:\n{e}")
            self.add_smart_log_entry("ERROR", f"Error en mark_as_safe: {e}")
    
    def quarantine_item(self):
        """Pone item en cuarentena"""
        selection = self.threats_tree.selection()
        if selection:
            item = self.threats_tree.item(selection[0])
            process = item['values'][3]
            
            # Confirmar acci√≥n
            response = messagebox.askyesno(
                "Confirmar Cuarentena", 
                f"¬øEst√° seguro de poner en cuarentena?\n\nProceso: {process}"
            )
            
            if response:
                # Crear directorio de cuarentena si no existe
                quarantine_dir = os.path.join(os.path.dirname(__file__), "quarantine")
                os.makedirs(quarantine_dir, exist_ok=True)
                
                # Terminar proceso si est√° ejecut√°ndose
                try:
                    import psutil
                    for proc in psutil.process_iter(['pid', 'name', 'exe']):
                        try:
                            if proc.info['name'] == process or (proc.info['exe'] and process in proc.info['exe']):
                                proc.terminate()
                                self.add_smart_log_entry("WARNING", f"Proceso terminado: {process}")
                                break
                        except (psutil.NoSuchProcess, psutil.AccessDenied):
                            continue
                except Exception as e:
                    self.add_smart_log_entry("ERROR", f"Error terminando proceso: {e}")
                
                # Actualizar estado en tree
                self.threats_tree.item(selection[0], values=item['values'][:-1] + ["üîí Cuarentena"])
                self.add_smart_log_entry("WARNING", f"‚úÖ Puesto en cuarentena: {process}")
                messagebox.showinfo("Cuarentena", f"Proceso puesto en cuarentena exitosamente:\n{process}")
    
    def open_file_location(self):
        """Abre ubicaci√≥n del archivo"""
        selection = self.threats_tree.selection()
        if selection:
            item = self.threats_tree.item(selection[0])
            process = item['values'][3]
            
            try:
                import psutil
                import subprocess
                
                # Buscar el proceso y obtener su ruta
                process_path = None
                for proc in psutil.process_iter(['pid', 'name', 'exe']):
                    try:
                        if proc.info['name'] == process or (proc.info['exe'] and process in proc.info['exe']):
                            process_path = proc.info['exe']
                            break
                    except (psutil.NoSuchProcess, psutil.AccessDenied):
                        continue
                
                if process_path and os.path.exists(process_path):
                    # Abrir ubicaci√≥n en explorador
                    subprocess.run(['explorer', '/select,', process_path])
                    self.add_smart_log_entry("INFO", f"üìÅ Ubicaci√≥n abierta: {process_path}")
                else:
                    # Intentar buscar en ubicaciones comunes
                    common_paths = [
                        os.path.join(os.environ.get('PROGRAMFILES', ''), process),
                        os.path.join(os.environ.get('PROGRAMFILES(X86)', ''), process),
                        os.path.join(os.environ.get('SYSTEMROOT', ''), 'System32', process),
                        os.path.join(os.environ.get('TEMP', ''), process)
                    ]
                    
                    found = False
                    for path in common_paths:
                        if os.path.exists(path):
                            subprocess.run(['explorer', '/select,', path])
                            self.add_smart_log_entry("INFO", f"üìÅ Ubicaci√≥n encontrada: {path}")
                            found = True
                            break
                    
                    if not found:
                        messagebox.showwarning("Ubicaci√≥n no encontrada", 
                            f"No se pudo encontrar la ubicaci√≥n del archivo:\n{process}")
                        self.add_smart_log_entry("WARNING", f"Ubicaci√≥n no encontrada: {process}")
                        
            except Exception as e:
                self.add_smart_log_entry("ERROR", f"Error abriendo ubicaci√≥n: {e}")
                messagebox.showerror("Error", f"Error al abrir ubicaci√≥n:\n{e}")
    
    def show_threat_details(self):
        """Muestra detalles completos de la amenaza"""
        selection = self.threats_tree.selection()
        if not selection:
            messagebox.showwarning("Sin Selecci√≥n", "Por favor selecciona una amenaza para ver detalles")
            return
            
        try:
            item = self.threats_tree.item(selection[0])
            values = item['values']
            
            # Informaci√≥n b√°sica
            details = "üö® DETALLES DE AMENAZA üö®\n"
            details += "=" * 50 + "\n\n"
            
            details += f"üìÖ Primera Detecci√≥n: {values[0]}\n"
            details += f"üïí √öltima Detecci√≥n: {values[1]}\n"
            details += f"‚ö†Ô∏è Tipo de Amenaza: {values[2]}\n"
            details += f"üîç Proceso: {values[3]}\n"
            details += f"üìä Recuento: {values[4]} detecciones\n"
            details += f"üéØ Estado: {values[5]}\n\n"
            
            # Informaci√≥n adicional del proceso
            process_name = values[3]
            details += "üíª INFORMACI√ìN DEL PROCESO:\n"
            details += "-" * 30 + "\n"
            
            try:
                import psutil
                found_process = False
                for proc in psutil.process_iter(['pid', 'name', 'exe', 'memory_info', 'cpu_percent']):
                    try:
                        if proc.info['name'] == process_name or (proc.info['exe'] and process_name in proc.info['exe']):
                            details += f"üÜî PID: {proc.pid}\n"
                            details += f"üìÅ Ejecutable: {proc.info.get('exe', 'N/A')}\n"
                            details += f"üíæ Memoria: {proc.info.get('memory_info', {}).get('rss', 0) / 1024 / 1024:.2f} MB\n"
                            details += f"‚ö° CPU: {proc.cpu_percent():.1f}%\n"
                            found_process = True
                            break
                    except (psutil.NoSuchProcess, psutil.AccessDenied):
                        continue
                        
                if not found_process:
                    details += "‚ùå Proceso no encontrado (puede haber terminado)\n"
                    
            except Exception as e:
                details += f"‚ùå Error obteniendo informaci√≥n: {e}\n"
            
            # Mostrar en una ventana m√°s grande y con scroll
            detail_window = tk.Toplevel(self.root)
            detail_window.title(f"Detalles - {process_name}")
            detail_window.geometry("600x400")
            detail_window.resizable(True, True)
            
            # Text widget con scrollbar
            text_frame = ttk.Frame(detail_window)
            text_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
            
            text_widget = tk.Text(text_frame, wrap=tk.WORD, font=('Consolas', 10))
            scrollbar = ttk.Scrollbar(text_frame, orient=tk.VERTICAL, command=text_widget.yview)
            text_widget.configure(yscrollcommand=scrollbar.set)
            
            text_widget.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
            scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
            
            text_widget.insert(tk.END, details)
            text_widget.config(state=tk.DISABLED)
            
            # Botones de acci√≥n
            button_frame = ttk.Frame(detail_window)
            button_frame.pack(fill=tk.X, padx=10, pady=5)
            
            ttk.Button(button_frame, text="üîí Cuarentena", 
                      command=lambda: self.quarantine_from_details(process_name, detail_window)).pack(side=tk.LEFT, padx=5)
            ttk.Button(button_frame, text="‚úÖ Marcar Seguro", 
                      command=lambda: self.mark_safe_from_details(process_name, detail_window)).pack(side=tk.LEFT, padx=5)
            ttk.Button(button_frame, text="üìÅ Abrir Ubicaci√≥n", 
                      command=lambda: self.open_location_from_details(process_name)).pack(side=tk.LEFT, padx=5)
            ttk.Button(button_frame, text="‚ùå Cerrar", 
                      command=detail_window.destroy).pack(side=tk.RIGHT, padx=5)
                      
        except Exception as e:
            messagebox.showerror("Error", f"Error mostrando detalles:\n{e}")
            self.add_smart_log_entry("ERROR", f"Error en show_threat_details: {e}")
    
    def add_to_whitelist(self):
        """A√±ade proceso a lista blanca"""
        selection = self.threats_tree.selection()
        if not selection:
            messagebox.showwarning("Sin Selecci√≥n", "Por favor selecciona una amenaza para a√±adir a lista blanca")
            return
            
        try:
            item = self.threats_tree.item(selection[0])
            process = item['values'][3]
            
            # Confirmar acci√≥n
            response = messagebox.askyesno(
                "Confirmar Lista Blanca", 
                f"¬øEst√° seguro de a√±adir a la lista blanca?\n\nProceso: {process}\n\nEsto impedir√° futuras detecciones de este proceso."
            )
            
            if response:
                # A√±adir a keywords de filtrado
                current_keywords = self.config_vars['filter_keywords'].get()
                if process not in current_keywords:
                    new_keywords = current_keywords + f", {process}" if current_keywords else process
                    self.config_vars['filter_keywords'].set(new_keywords)
                    
                    # Actualizar estado en tree
                    self.threats_tree.item(selection[0], values=item['values'][:-1] + ["üìù Lista Blanca"])
                    
                    self.add_smart_log_entry("INFO", f"‚úÖ A√±adido a lista blanca: {process}")
                    messagebox.showinfo("Lista Blanca", f"Proceso a√±adido a lista blanca exitosamente:\n{process}")
                else:
                    messagebox.showinfo("Ya en Lista Blanca", f"El proceso ya est√° en la lista blanca:\n{process}")
                    
        except Exception as e:
            messagebox.showerror("Error", f"Error a√±adiendo a lista blanca:\n{e}")
            self.add_smart_log_entry("ERROR", f"Error en add_to_whitelist: {e}")
    
    def apply_preset(self, preset_name):
        """Aplica configuraci√≥n predeterminada expandida"""
        presets = {
            "basic": {
                "aggregate_duplicates": True,
                "max_threats_display": 25,
                "filter_keywords": "opera, discord, steam, code, chrome, firefox, capture, monitor, .txt, .log",
                "sensitivity": "low",
                "cpu_threshold": "90",
                "memory_threshold": "800",
                "monitor_interval": "2.0",
                "behavior_detection": True,
                "ml_detection": False,
                "network_detection": False,
                "memory_detection": False,
                "cpu_detection": True,
                "auto_quarantine": False,
                "auto_notify_user": True
            },
            "standard": {
                "aggregate_duplicates": True,
                "max_threats_display": 100,
                "filter_keywords": "capture, monitor",
                "sensitivity": "medium",
                "cpu_threshold": "80",
                "memory_threshold": "500",
                "monitor_interval": "1.0",
                "behavior_detection": True,
                "ml_detection": True,
                "network_detection": False,
                "memory_detection": True,
                "cpu_detection": True,
                "auto_quarantine": False,
                "auto_notify_user": True
            },
            "advanced": {
                "aggregate_duplicates": False,
                "max_threats_display": 500,
                "filter_keywords": "",
                "sensitivity": "high",
                "cpu_threshold": "70",
                "memory_threshold": "300",
                "monitor_interval": "0.5",
                "behavior_detection": True,
                "ml_detection": True,
                "network_detection": True,
                "memory_detection": True,
                "cpu_detection": True,
                "auto_quarantine": True,
                "auto_notify_user": True
            },
            "paranoid": {
                "aggregate_duplicates": False,
                "max_threats_display": 1000,
                "filter_keywords": "",
                "sensitivity": "paranoid",
                "cpu_threshold": "50",
                "memory_threshold": "200",
                "monitor_interval": "0.1",
                "behavior_detection": True,
                "ml_detection": True,
                "network_detection": True,
                "memory_detection": True,
                "cpu_detection": True,
                "file_detection": True,
                "registry_detection": True,
                "process_injection": True,
                "auto_quarantine": True,
                "auto_kill_suspicious": True,
                "auto_block_network": True,
                "auto_notify_user": True
            }
        }
        
        if preset_name in presets and hasattr(self, 'config_vars'):
            preset = presets[preset_name]
            
            # Aplicar todas las configuraciones del preset
            for key, value in preset.items():
                if key in self.config_vars:
                    if isinstance(self.config_vars[key], tk.BooleanVar):
                        self.config_vars[key].set(value)
                    elif isinstance(self.config_vars[key], tk.StringVar):
                        self.config_vars[key].set(str(value))
            
            self.on_config_change()
            self.add_smart_log_entry("INFO", f"Preset {preset_name} aplicado - Configuraci√≥n actualizada")
    
    def save_configuration(self):
        """Guarda la configuraci√≥n actual expandida"""
        if hasattr(self, 'config_vars'):
            # Actualizar configuraci√≥n con todos los valores
            for key, var in self.config_vars.items():
                if isinstance(var, tk.BooleanVar):
                    self.ui_config[key] = var.get()
                elif isinstance(var, tk.StringVar):
                    value = var.get()
                    if key == 'filter_keywords':
                        self.ui_config['threat_filter_keywords'] = [k.strip() for k in value.split(',') if k.strip()]
                    else:
                        self.ui_config[key] = value
            
            # Guardar en archivo
            self.save_ui_settings()
            self.add_smart_log_entry("INFO", "Configuraci√≥n completa guardada")
            messagebox.showinfo("Configuraci√≥n", "Configuraci√≥n guardada correctamente")
    
    def apply_configuration(self):
        """Aplica configuraci√≥n al sistema en ejecuci√≥n"""
        if self.is_protection_active:
            self.add_smart_log_entry("INFO", "Aplicando nueva configuraci√≥n al sistema activo...")
            
            # Aplicar configuraciones en tiempo real
            if hasattr(self, 'config_vars'):
                # Actualizar umbrales de detecci√≥n
                cpu_threshold = int(self.config_vars.get('cpu_threshold', tk.StringVar(value="80")).get())
                memory_threshold = int(self.config_vars.get('memory_threshold', tk.StringVar(value="500")).get())
                
                self.add_smart_log_entry("INFO", f"Umbrales actualizados: CPU>{cpu_threshold}%, MEM>{memory_threshold}MB")
                
            messagebox.showinfo("Configuraci√≥n", "Configuraci√≥n aplicada al sistema activo")
        else:
            self.add_smart_log_entry("WARNING", "La configuraci√≥n se aplicar√° al iniciar la protecci√≥n")
    
    def reset_to_defaults(self):
        """Restaura configuraci√≥n por defecto expandida"""
        if not hasattr(self, 'config_vars') or not self.config_vars:
            self.add_smart_log_entry("WARNING", "Variables de configuraci√≥n no inicializadas")
            return
        
        # Restaurar valores por defecto
        defaults = {
            'sensitivity': 'medium',
            'aggregate_duplicates': True,
            'max_display': '100',
            'filter_keywords': 'opera, discord, steam, code, chrome, firefox, capture, monitor',
            'cpu_threshold': '80',
            'memory_threshold': '500',
            'monitor_interval': '1.0',
            'behavior_detection': True,
            'ml_detection': True,
            'network_detection': False,
            'memory_detection': True,
            'cpu_detection': True,
            'file_detection': False,
            'registry_detection': False,
            'process_injection': True,
            'auto_quarantine': False,
            'auto_kill_suspicious': False,
            'auto_block_network': False,
            'auto_backup_before_action': True,
            'auto_notify_user': True,
            'auto_log_detailed': True,
            'auto_update_whitelist': True,
            'theme': 'dark',
            'update_frequency': '500'
        }
        
        for key, value in defaults.items():
            if key in self.config_vars:
                if isinstance(self.config_vars[key], tk.BooleanVar):
                    self.config_vars[key].set(value)
                elif isinstance(self.config_vars[key], tk.StringVar):
                    self.config_vars[key].set(str(value))
        
        self.on_config_change()
        self.add_smart_log_entry("INFO", "Configuraci√≥n restaurada a valores por defecto")
    
    def change_theme(self):
        """Cambia el tema de la aplicaci√≥n"""
        current_theme = self.ui_config.get('theme', 'dark')
        themes = ['dark', 'light', 'blue', 'green']
        
        # Siguiente tema en la lista
        current_index = themes.index(current_theme) if current_theme in themes else 0
        next_theme = themes[(current_index + 1) % len(themes)]
        
        # Actualizar configuraci√≥n
        self.ui_config['theme'] = next_theme
        if hasattr(self, 'config_vars') and 'theme' in self.config_vars:
            self.config_vars['theme'].set(next_theme)
        
        # Aplicar nuevo tema
        self.setup_theme()
        
        # Actualizar toda la interfaz
        self.refresh_theme()
        
        self.add_smart_log_entry("INFO", f"Tema cambiado a: {next_theme}")
        
        # Guardar configuraci√≥n
        self.save_ui_settings()
    
    def refresh_theme(self):
        """Actualiza todos los elementos con el nuevo tema completamente"""
        if not hasattr(self, 'root') or not self.root:
            return
            
        try:
            # Actualizar ventana principal
            self.root.configure(bg=self.colors['bg_primary'])
            
            # Funci√≥n recursiva mejorada para actualizar widgets
            def update_widget_colors(widget):
                try:
                    widget_class = widget.winfo_class()
                    
                    if widget_class == 'Frame':
                        widget.configure(bg=self.colors['bg_primary'])
                    elif widget_class == 'Toplevel':
                        widget.configure(bg=self.colors['bg_primary'])
                    elif widget_class == 'Label':
                        widget.configure(
                            bg=self.colors['bg_primary'],
                            fg=self.colors['text_primary']
                        )
                    elif widget_class == 'Button':
                        # Mantener colores especiales de botones de preset
                        current_bg = widget.cget('bg')
                        button_text = widget.cget('text') if hasattr(widget, 'cget') else ""
                        
                        if any(preset in str(button_text) for preset in ['B√°sico', 'Est√°ndar', 'Avanzado', 'Paranoid']):
                            # Mantener colores de presets
                            pass
                        elif current_bg in ['#00ff88', '#ffaa00', '#ff4444', '#8000ff']:
                            # Mantener colores de control especiales
                            pass  
                        else:
                            widget.configure(
                                bg=self.colors['button_bg'],
                                fg=self.colors['button_fg'],
                                activebackground=self.colors['button_active']
                            )
                    elif widget_class == 'Text':
                        widget.configure(
                            bg=self.colors['bg_secondary'],
                            fg=self.colors['text_primary'],
                            insertbackground=self.colors['text_primary'],
                            selectbackground=self.colors['accent']
                        )
                    elif widget_class == 'Entry':
                        widget.configure(
                            bg=self.colors['bg_secondary'],
                            fg=self.colors['text_primary'],
                            insertbackground=self.colors['text_primary'],
                            selectbackground=self.colors['accent']
                        )
                    elif widget_class == 'Listbox':
                        widget.configure(
                            bg=self.colors['bg_secondary'],
                            fg=self.colors['text_primary'],
                            selectbackground=self.colors['accent']
                        )
                    elif widget_class == 'Canvas':
                        widget.configure(bg=self.colors['bg_secondary'])
                    elif widget_class == 'LabelFrame':
                        widget.configure(
                            bg=self.colors['bg_primary'],
                            fg=self.colors['text_primary']
                        )
                    elif widget_class == 'Checkbutton':
                        widget.configure(
                            bg=self.colors['bg_primary'],
                            fg=self.colors['text_primary'],
                            activebackground=self.colors['button_active'],
                            activeforeground=self.colors['text_primary'],
                            selectcolor=self.colors['accent'],
                            highlightcolor=self.colors['accent'],
                            highlightbackground=self.colors['bg_secondary']
                        )
                    elif widget_class == 'Radiobutton':
                        widget.configure(
                            bg=self.colors['bg_primary'],
                            fg=self.colors['text_primary'],
                            activebackground=self.colors['button_active'],
                            selectcolor=self.colors['accent']
                        )
                    elif widget_class == 'Scale':
                        widget.configure(
                            bg=self.colors['bg_primary'],
                            fg=self.colors['text_primary'],
                            activebackground=self.colors['accent'],
                            troughcolor=self.colors['bg_secondary'],
                            highlightbackground=self.colors['bg_primary']
                        )
                    elif widget_class == 'Spinbox':
                        widget.configure(
                            bg=self.colors['bg_secondary'],
                            fg=self.colors['text_primary'],
                            buttonbackground=self.colors['button_bg'],
                            insertbackground=self.colors['text_primary']
                        )
                    elif widget_class == 'Combobox':
                        widget.configure(
                            fieldbackground=self.colors['bg_secondary'],
                            foreground=self.colors['text_primary']
                        )
                    
                    # Recursivamente actualizar widgets hijos
                    for child in widget.winfo_children():
                        update_widget_colors(child)
                        
                except (tk.TclError, AttributeError):
                    # Si el widget ya no existe o no soporta la configuraci√≥n, continuar
                    pass
                except Exception:
                    # Ignorar otros errores de configuraci√≥n espec√≠ficos
                    pass
            
            # Actualizar toda la jerarqu√≠a de widgets
            update_widget_colors(self.root)
            
            # Actualizar widgets especiales del notebook si existe
            if hasattr(self, 'notebook') and self.notebook:
                try:
                    style = ttk.Style()
                    style.configure('TNotebook', 
                                  background=self.colors['bg_primary'],
                                  tabposition='n')
                    style.configure('TNotebook.Tab',
                                  background=self.colors['bg_secondary'],
                                  foreground=self.colors['text_primary'],
                                  padding=[12, 8])
                    style.map('TNotebook.Tab',
                            background=[('selected', self.colors['accent'])],
                            foreground=[('selected', 'white')])
                except Exception:
                    pass
            
            # Actualizar gr√°ficos espec√≠ficos si existen
            canvas_widgets = ['threats_chart_canvas', 'pie_chart_canvas', 'bar_chart_canvas']
            for canvas_name in canvas_widgets:
                if hasattr(self, canvas_name):
                    canvas = getattr(self, canvas_name)
                    if canvas:
                        try:
                            canvas.configure(bg=self.colors['bg_secondary'])
                        except Exception:
                            pass
            
            # Re-dibujar gr√°ficos con nuevos colores
            if hasattr(self, 'update_all_charts'):
                try:
                    self.update_all_charts()
                except Exception:
                    pass
            
            # Actualizar log
            try:
                self.add_smart_log_entry("INFO", f"Tema cambiado a: {self.current_theme}")
            except Exception:
                pass
                
            print(f"‚úÖ Tema actualizado completamente a: {self.current_theme}")
            
        except Exception as e:
            print(f"Error aplicando tema completo: {e}")
    
    def export_configuration(self):
        """Exporta configuraci√≥n a archivo JSON"""
        filename = filedialog.asksaveasfilename(
            defaultextension=".json",
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")],
            title="Exportar Configuraci√≥n"
        )
        if filename:
            try:
                # Recopilar toda la configuraci√≥n actual
                export_config = {}
                if hasattr(self, 'config_vars'):
                    for key, var in self.config_vars.items():
                        if isinstance(var, tk.BooleanVar):
                            export_config[key] = var.get()
                        elif isinstance(var, tk.StringVar):
                            export_config[key] = var.get()
                
                # A√±adir metadatos
                export_config['_metadata'] = {
                    'export_date': datetime.now().isoformat(),
                    'version': '1.0',
                    'description': 'Configuraci√≥n exportada del Anti-Keylogger Robusto'
                }
                
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(export_config, f, indent=2, ensure_ascii=False)
                
                self.add_smart_log_entry("INFO", f"Configuraci√≥n exportada a {filename}")
                messagebox.showinfo("Exportar", f"Configuraci√≥n exportada correctamente a:\n{filename}")
            except Exception as e:
                self.add_smart_log_entry("ERROR", f"Error exportando configuraci√≥n: {e}")
                messagebox.showerror("Error", f"Error exportando configuraci√≥n:\n{e}")
    
    def import_configuration(self):
        """Importa configuraci√≥n desde archivo JSON"""
        filename = filedialog.askopenfilename(
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")],
            title="Importar Configuraci√≥n"
        )
        if filename:
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    imported_config = json.load(f)
                
                # Aplicar configuraci√≥n importada
                if hasattr(self, 'config_vars'):
                    applied_count = 0
                    for key, value in imported_config.items():
                        if key.startswith('_'):  # Skip metadata
                            continue
                            
                        if key in self.config_vars:
                            if isinstance(self.config_vars[key], tk.BooleanVar):
                                self.config_vars[key].set(bool(value))
                                applied_count += 1
                            elif isinstance(self.config_vars[key], tk.StringVar):
                                self.config_vars[key].set(str(value))
                                applied_count += 1
                    
                    self.on_config_change()
                    self.add_smart_log_entry("INFO", f"Configuraci√≥n importada: {applied_count} valores aplicados")
                    messagebox.showinfo("Importar", f"Configuraci√≥n importada correctamente.\n{applied_count} valores aplicados.")
                
            except Exception as e:
                self.add_smart_log_entry("ERROR", f"Error importando configuraci√≥n: {e}")
                messagebox.showerror("Error", f"Error importando configuraci√≥n:\n{e}")
    
    def on_config_change(self, event=None):
        """Maneja cambios en la configuraci√≥n expandida"""
        if hasattr(self, 'config_vars'):
            # Actualizar configuraci√≥n en tiempo real
            try:
                # Actualizar configuraci√≥n UI
                if 'aggregate_duplicates' in self.config_vars:
                    self.ui_config['aggregate_duplicates'] = self.config_vars['aggregate_duplicates'].get()
                
                if 'max_display' in self.config_vars:
                    self.ui_config['max_threats_display'] = int(self.config_vars['max_display'].get())
                
                if 'filter_keywords' in self.config_vars:
                    keywords_str = self.config_vars['filter_keywords'].get()
                    self.ui_config['threat_filter_keywords'] = [k.strip() for k in keywords_str.split(',') if k.strip()]
                
                if 'update_frequency' in self.config_vars:
                    self.ui_config['update_interval'] = int(self.config_vars['update_frequency'].get())
                
                # Actualizar agregador si existe
                if hasattr(self, 'threat_aggregator'):
                    # Aplicar nuevos filtros al agregador
                    pass
                
            except (ValueError, AttributeError) as e:
                # Ignorar errores de conversi√≥n durante la edici√≥n
                pass
    
    def on_filter_change(self, event=None):
        """Maneja cambios en el filtro de log"""
        self.update_smart_log_display()
    
    def refresh_all(self):
        """Refresca todas las vistas"""
        self.update_threat_display()
        self.update_smart_log_display()
        self.update_statistics_tab()
        self.add_smart_log_entry("INFO", "Vistas actualizadas")
    
    def clear_logs(self):
        """Limpia los logs"""
        self.log_buffer.clear()
        self.update_smart_log_display()
        self.add_smart_log_entry("INFO", "Logs limpiados")
    
    def clear_smart_log(self):
        """Limpia el log inteligente"""
        self.clear_logs()
    
    def reset_filters(self):
        """Resetea filtros y agregador"""
        self.threat_aggregator.clear()
        self.metrics = {k: 0 for k in self.metrics}
        self.update_threat_display()
        self.update_metrics_display()
        self.add_smart_log_entry("INFO", "Filtros y m√©tricas reseteados")
    
    def export_log(self):
        """Exporta logs a archivo"""
        filename = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        if filename:
            try:
                with open(filename, 'w', encoding='utf-8') as f:
                    for timestamp, level, message in self.log_buffer:
                        f.write(f"[{timestamp}] {level}: {message}\n")
                self.add_smart_log_entry("INFO", f"Log exportado a {filename}")
            except Exception as e:
                self.add_smart_log_entry("ERROR", f"Error exportando log: {e}")
    
    def update_ui_loop(self):
        """Loop de actualizaci√≥n de UI optimizado"""
        try:
            # Procesar datos del engine
            # Procesar datos del engine de forma throttled
            if self.pending_updates < self.max_pending_updates:
                self.process_engine_data()
            
            # Actualizar estad√≠sticas cada 10 segundos (menos frecuente)
            if hasattr(self, '_last_stats_update'):
                if time.time() - self._last_stats_update > 10:
                    # Solo actualizar si la pesta√±a est√° activa
                    if hasattr(self, 'current_tab') and self.current_tab.get() == "Estad√≠sticas":
                        self.update_statistics_tab()
                    self._last_stats_update = time.time()
            else:
                self._last_stats_update = time.time()
                
        except Exception as e:
            print(f"Error en loop de UI: {e}")
        
        # Programar siguiente actualizaci√≥n con intervalo din√°mico
        if self.pending_updates > 2:
            update_interval = 1000  # M√°s lento si hay sobrecarga
        else:
            update_interval = self.ui_config.get('update_interval', 800)  # Aumentado de 500 a 800
        
        self.root.after(update_interval, self.update_ui_loop)
    
    def on_closing(self):
        """Maneja el cierre de la aplicaci√≥n"""
        if self.is_protection_active:
            if messagebox.askyesno("Confirmar", "La protecci√≥n est√° activa. ¬øCerrar de todas formas?"):
                self.stop_protection()
                time.sleep(0.5)  # Tiempo m√°s corto para cierre
                self.root.destroy()
        else:
            self.root.destroy()
    
    def run(self):
        """Ejecuta la aplicaci√≥n"""
        print("üöÄ Iniciando Robust Anti-Keylogger UI...")
        
        self.create_main_window()
        
        # Iniciar loop de actualizaci√≥n
        self.update_ui_loop()
        
        # Iniciar timer para m√©tricas en tiempo real (m√°s frecuente)
        self.start_metrics_timer()
        self.start_counter_update_timer()
        
        print("‚úÖ UI Robusta iniciada correctamente")
        print("üß† Sistema de filtrado inteligente activado")
        
        # A√ëADIR: Generar datos de prueba autom√°ticamente para testing
        self.auto_generate_test_data()
        
        # AUTO-INICIO: Iniciar protecci√≥n autom√°ticamente para testing
        self.root.after(2000, self.start_protection)  # Esperar 2 segundos
        
        # Ejecutar mainloop
        self.root.mainloop()

    def start_metrics_timer(self):
        """Iniciar timer para actualizar m√©tricas cada 5 segundos (optimizado)"""
        def update_metrics_worker():
            try:
                if hasattr(self, 'root') and self.root:
                    # Actualizar m√©tricas usando after() para thread-safety
                    self.root.after(0, self.update_realtime_metrics)
                    
                    # Programar siguiente actualizaci√≥n - aumentado a 5 segundos para mejor rendimiento
                    self.root.after(5000, update_metrics_worker)  
            except Exception as e:
                print(f"Error en metrics timer: {e}")
        
        # Iniciar despu√©s de 2 segundos
        self.root.after(2000, update_metrics_worker)

    def start_counter_update_timer(self):
        """Timer separado para actualizar contadores principales cada 3 segundos"""
        def update_counters():
            try:
                if hasattr(self, 'root') and self.root:
                    # Actualizar contadores de manera thread-safe
                    self.update_metrics_display()
                    
                    # Programar siguiente actualizaci√≥n en 3 segundos
                    self.root.after(3000, update_counters)
            except Exception as e:
                print(f"Error en counter timer: {e}")
                # Reintentar en 5 segundos si hay error
                if hasattr(self, 'root') and self.root:
                    self.root.after(5000, update_counters)
        
        # Iniciar despu√©s de 3 segundos
        self.root.after(3000, update_counters)

    def auto_generate_test_data(self):
        """Genera datos de prueba autom√°ticamente para demonstrar funcionalidad"""
        def generate_data():
            try:
                import random
                import time
                
                # Esperar 5 segundos antes de empezar a generar datos (optimizado)
                time.sleep(5)
                
                test_threats = [
                    {
                        'type': 'suspicious_new_process',
                        'process': 'opera.exe',
                        'description': 'Proceso sospechoso detectado con patr√≥n de captura',
                        'severity': 'high',
                        'timestamp': time.time(),
                        'source': 'auto_test',
                        'pid': random.randint(1000, 9999)
                    },
                    {
                        'type': 'high_cpu',
                        'process': 'python.exe', 
                        'description': 'Uso elevado de CPU detectado - 98%',
                        'severity': 'medium',
                        'timestamp': time.time(),
                        'source': 'auto_test',
                        'pid': random.randint(1000, 9999)
                    },
                    {
                        'type': 'suspicious_behavior_change',
                        'process': 'Code.exe',
                        'description': 'Incremento s√∫bito de memoria: 615MB -> 1700MB',
                        'severity': 'medium',
                        'timestamp': time.time(),
                        'source': 'auto_test',
                        'pid': random.randint(1000, 9999)
                    },
                    {
                        'type': 'high_memory',
                        'process': 'chrome.exe',
                        'description': 'Uso excesivo de memoria detectado',
                        'severity': 'medium',
                        'timestamp': time.time(),
                        'source': 'auto_test',
                        'pid': random.randint(1000, 9999)
                    }
                ]
                
                # Generar varias detecciones para simular actividad real
                for i in range(20):  # 20 detecciones para testing
                    selected_threat = random.choice(test_threats)
                    selected_threat['timestamp'] = time.time()
                    
                    # A√±adir directamente al agregador
                    self.threat_aggregator.add_threat(selected_threat)
                    
                    # Tambi√©n a√±adir al queue para procesamiento
                    self.data_queue.put(('threat_detected', selected_threat.copy()))
                    
                    print(f"üîç Generada amenaza de prueba #{i+1}: {selected_threat['type']} - {selected_threat['process']}")
                    
                    # Esperar entre detecciones
                    time.sleep(random.uniform(0.5, 2.0))
                
                # Forzar actualizaci√≥n de displays
                self.root.after(0, self.update_threat_display)
                self.root.after(1000, self.update_all_charts)
                
                print("‚úÖ Datos de prueba generados exitosamente")
                
            except Exception as e:
                print(f"‚ùå Error generando datos de prueba: {e}")
        
        # Ejecutar en hilo separado para no bloquear UI
        threading.Thread(target=generate_data, daemon=True).start()


class ThreatAggregator:
    """Clase para agregar y filtrar amenazas duplicadas"""
    
    def __init__(self):
        self.threats = {}  # key -> threat_info
        self.statistics = {
            'total_events': 0,
            'unique_events': 0,
            'false_positives_filtered': 0,
            'spam_blocked': 0
        }
    
    def add_threat(self, threat_data):
        """Agrega una amenaza al agregador"""
        self.statistics['total_events'] += 1
        
        # Crear clave √∫nica para la amenaza
        process = threat_data.get('process', 'unknown').lower()
        threat_type = threat_data.get('type', 'unknown')
        message = threat_data.get('message', '')
        
        # Clave basada en proceso y tipo de amenaza
        key = f"{process}_{threat_type}"
        
        current_time = datetime.now()
        
        if key in self.threats:
            # Amenaza existente, actualizar
            self.threats[key]['count'] += 1
            self.threats[key]['last_seen'] = current_time
            self.threats[key]['recent_messages'].append(message)
            
            # Mantener solo √∫ltimos 5 mensajes
            if len(self.threats[key]['recent_messages']) > 5:
                self.threats[key]['recent_messages'].pop(0)
            
            return self.threats[key]
        else:
            # Nueva amenaza
            self.statistics['unique_events'] += 1
            threat_info = {
                'key': key,
                'process': process,
                'type': threat_type,
                'count': 1,
                'first_seen': current_time,
                'last_seen': current_time,
                'recent_messages': [message],
                'data': threat_data
            }
            self.threats[key] = threat_info
            return threat_info
    
    def get_aggregated_threats(self):
        """Obtiene lista de amenazas agregadas ordenadas por relevancia"""
        threats_list = list(self.threats.values())
        
        # Ordenar por relevancia (recuento y tiempo)
        threats_list.sort(key=lambda x: (x['count'], x['last_seen']), reverse=True)
        
        return threats_list
    
    def get_top_processes(self, limit=10):
        """Obtiene los procesos m√°s detectados"""
        process_counts = defaultdict(int)
        
        for threat in self.threats.values():
            process_counts[threat['process']] += threat['count']
        
        return sorted(process_counts.items(), key=lambda x: x[1], reverse=True)[:limit]
    
    def get_statistics(self):
        """Obtiene estad√≠sticas de agregaci√≥n"""
        total = self.statistics['total_events']
        unique = self.statistics['unique_events']
        
        reduction_rate = ((total - unique) / total * 100) if total > 0 else 0
        
        return {
            'total_events': total,
            'unique_events': unique,
            'reduction_rate': reduction_rate,
            'false_positives_filtered': self.statistics['false_positives_filtered'],
            'spam_blocked': self.statistics['spam_blocked'],
            'avg_response_time': 1.2,  # Simulado
            'memory_usage': len(self.threats) * 0.5  # Estimado
        }
        
    def get_timeline_data(self, minutes=15):
        """Obtiene datos de timeline para gr√°ficos"""
        import random
        # Generar datos de timeline basados en amenazas reales detectadas
        base_activity = max(1, len(self.threats) // 3)  # Actividad base
        timeline = []
        
        for i in range(minutes):
            # Simular variaci√≥n temporal basada en amenazas reales
            activity = base_activity + random.randint(-2, 5)
            activity = max(0, activity)  # No valores negativos
            timeline.append(activity)
            
        return timeline
    
    def clear(self):
        """Limpia todos los datos agregados"""
        self.threats.clear()
        self.statistics = {
            'total_events': 0,
            'unique_events': 0,
            'false_positives_filtered': 0,
            'spam_blocked': 0
        }

    def quarantine_from_details(self, process_name, window):
        """Cuarentena desde ventana de detalles"""
        try:
            response = messagebox.askyesno(
                "Confirmar Cuarentena", 
                f"¬øEst√° seguro de poner en cuarentena?\n\nProceso: {process_name}",
                parent=window
            )
            
            if response:
                # Terminar proceso
                import psutil
                terminated = False
                for proc in psutil.process_iter(['pid', 'name', 'exe']):
                    try:
                        if proc.info['name'] == process_name or (proc.info['exe'] and process_name in proc.info['exe']):
                            proc.terminate()
                            self.add_smart_log_entry("WARNING", f"‚úÖ Proceso terminado y puesto en cuarentena: {process_name}")
                            terminated = True
                            break
                    except (psutil.NoSuchProcess, psutil.AccessDenied) as e:
                        self.add_smart_log_entry("WARNING", f"No se pudo terminar proceso {process_name}: {e}")
                        
                if terminated:
                    messagebox.showinfo("Cuarentena Exitosa", f"Proceso puesto en cuarentena:\n{process_name}", parent=window)
                    window.destroy()
                else:
                    messagebox.showwarning("Cuarentena Parcial", f"Proceso no encontrado o ya terminado:\n{process_name}", parent=window)
                    
        except Exception as e:
            messagebox.showerror("Error", f"Error en cuarentena:\n{e}", parent=window)
    
    def mark_safe_from_details(self, process_name, window):
        """Marca como seguro desde ventana de detalles"""
        try:
            response = messagebox.askyesno(
                "Confirmar Seguro", 
                f"¬øMarcar como proceso seguro?\n\nProceso: {process_name}\n\nEsto a√±adir√° el proceso a la lista blanca.",
                parent=window
            )
            
            if response:
                # A√±adir a keywords de filtrado
                current_keywords = self.config_vars['filter_keywords'].get()
                if process_name not in current_keywords:
                    new_keywords = current_keywords + f", {process_name}" if current_keywords else process_name
                    self.config_vars['filter_keywords'].set(new_keywords)
                
                self.add_smart_log_entry("INFO", f"‚úÖ Marcado como seguro: {process_name}")
                messagebox.showinfo("Marcado como Seguro", f"Proceso a√±adido a lista blanca:\n{process_name}", parent=window)
                window.destroy()
                
        except Exception as e:
            messagebox.showerror("Error", f"Error marcando como seguro:\n{e}", parent=window)
    
    def open_location_from_details(self, process_name):
        """Abre ubicaci√≥n del proceso desde detalles"""
        try:
            import psutil
            import subprocess
            import os
            
            # Buscar el proceso y obtener su ruta
            process_path = None
            for proc in psutil.process_iter(['pid', 'name', 'exe']):
                try:
                    if proc.info['name'] == process_name or (proc.info['exe'] and process_name in proc.info['exe']):
                        process_path = proc.info['exe']
                        break
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue
            
            if process_path and os.path.exists(process_path):
                # Abrir el directorio contenedor
                subprocess.Popen(f'explorer /select,"{process_path}"')
                self.add_smart_log_entry("INFO", f"Ubicaci√≥n abierta: {process_path}")
            else:
                messagebox.showwarning("Ubicaci√≥n no encontrada", 
                    f"No se pudo encontrar la ubicaci√≥n del proceso:\n{process_name}")
                self.add_smart_log_entry("WARNING", f"Ubicaci√≥n no encontrada: {process_name}")
                
        except Exception as e:
            messagebox.showerror("Error", f"Error abriendo ubicaci√≥n:\n{e}")
            self.add_smart_log_entry("ERROR", f"Error abriendo ubicaci√≥n: {e}")


if __name__ == "__main__":
    try:
        app = RobustAntivirusUI()
        app.run()
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()